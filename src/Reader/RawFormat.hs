-- | Raw format reader
module Reader.RawFormat
  ( -- * Functions
    readRawWord8Vector
  ) where

import System.IO
import Control.Exception
import qualified Data.ByteString as B
import Control.Monad (zipWithM_)

import Data.Word
import qualified Data.Vector.Unboxed as DVU
import qualified Data.Vector.Unboxed.Mutable as M

-- | Read a raw 'Word8' vector from a file.
--
-- Note 1: This is non-polymorphic: It just reads an unboxed vector from a file.
-- If further transformations are needed, they need to be applied afterward.
--
-- Note 2: If an error occurs while reading the file, the resulting vector is an empty
-- (null) vector.
readRawWord8Vector :: FilePath                  -- ^ File to read
                   -> IO (DVU.Vector Word8)     -- ^ The resulting vector.
readRawWord8Vector path =
  if (not . null) path then
    (B.readFile path >>= fillVector) `catches` [ Handler (genericIOErrors "readRawWord8Vector")
                                               -- Add more handlers here, as needed
                                               ]
  else
    hPutStrLn stderr "readRawWord8Vector: Empty file name"
    >> invalidRawVector
  where
    fillVector contents           = return $ DVU.create (M.new (B.length contents) >>= unpackAndFillVec contents)
    unpackAndFillVec contents vec = zipWithM_ (M.write vec)
                                              [(0 :: Int)..(B.length contents)]
                                              (B.unpack contents)
                                    >> (vec `seq` return vec)

-- | An invalid raw vector, generated by the exception handlers
invalidRawVector :: IO (DVU.Vector Word8)
invalidRawVector = return DVU.empty

-- | Generic I/O exception handler. This outputs a message to 'stderr' of the form
--
-- @whence: exception@
genericIOErrors :: String                       -- ^ An indication of where the error ocurred
                -> IOError                      -- ^ The IO exception
                -> IO (DVU.Vector Word8)        -- ^ Result is always 'invalidRawVector'
genericIOErrors whence exc =
  hPutStrLn stderr (whence ++ ": " ++ (show exc))
  >> invalidRawVector
