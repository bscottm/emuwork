module Main where

import           Lens.Micro                           ((^.), (&), (.~))
import           Test.Framework                       (Test, defaultMain, testGroup)
import           Test.Framework.Providers.HUnit       (testCase)
import           Test.HUnit                           (Assertion, (@?=))
import qualified Data.Vector.Unboxed as DVU

import Machine.System
import Machine.ProgramCounter
import Machine.MemorySystem
import           Z80

main :: IO ()
main = defaultMain mkMsysTests

z80system :: Z80system Z80BaseSystem
z80system = z80generic & sysName .~ "Test Z80 generic system"
                       & sysAliases .~ []

z80instTest :: TestInstruction -> Assertion
z80instTest (TI bytes inst) = (decodedPC @?= expectedPC) >> (inst' ^. decodedInsn @?= inst)
  where
    decodedPC = inst' ^. decodedInsnPC
    expectedPC = PC (fromIntegral (0xe0 + length bytes))
    (inst', _sys') = (testsys ^. processor . processorOps . idecode) (PC 0xe0) testsys
    testsys = z80generic & memory .~ mkROMRegion 0xe0 (DVU.fromList bytes) mempty

data TestInstruction = TI [Z80word] Z80instruction

mkMsysTests :: [Test]
mkMsysTests =
  [ testGroup "Regular instructions"
    [ testCase "NOP                 " (z80instTest (TI [0x00                        ] NOP))
    , testCase "LD BC,NN            " (z80instTest (TI [0x01, 0x56, 0x78            ] (LD (RPair16ImmLoad (RPair16 BC) (AbsAddr 0x7856)))))
    , testCase "LD (BC),A           " (z80instTest (TI [0x02                        ] (LD BCIndirectStore)))
    , testCase "INC BC              " (z80instTest (TI [0x03                        ] (INC16 (RPair16 BC))))
    , testCase "INC B               " (z80instTest (TI [0x04                        ] (INC B)))
    , testCase "DEC B               " (z80instTest (TI [0x05                        ] (DEC B)))
    , testCase "LD B,N              " (z80instTest (TI [0x06, 0x9a                  ] (LD (Reg8Imm B 0x9a))))
    , testCase "RLCA                " (z80instTest (TI [0x07                        ] RLCA))
    , testCase "EX AF,AF'           " (z80instTest (TI [0x08                        ] (EXC AFAF')))
    , testCase "ADD HL,BC           " (z80instTest (TI [0x09                        ] (ADD16 DestHL (RPair16 BC))))
    , testCase "LD A,(BC)           " (z80instTest (TI [0x0A                        ] (LD AccBCIndirect)))
    , testCase "DEC BC              " (z80instTest (TI [0x0B                        ] (DEC16 (RPair16 BC))))
    , testCase "INC C               " (z80instTest (TI [0x0C                        ] (INC C)))
    , testCase "DEC C               " (z80instTest (TI [0x0D                        ] (DEC C)))
    , testCase "LD C,N              " (z80instTest (TI [0x0E, 0xbc                  ] (LD (Reg8Imm C 0xbc))))
    , testCase "RRCA                " (z80instTest (TI [0x0F                        ] RRCA))
    , testCase "DJNZ $+2            " (z80instTest (TI [0x10, 0xfe                  ] (DJNZ (AbsAddr 0xe0))))
    , testCase "LD DE,NN            " (z80instTest (TI [0x11, 0xde, 0x0f            ] (LD (RPair16ImmLoad (RPair16 DE) (AbsAddr 0x0fde)))))
    , testCase "LD (DE),A           " (z80instTest (TI [0x12                        ] (LD DEIndirectStore)))
    , testCase "INC DE              " (z80instTest (TI [0x13                        ] (INC16 (RPair16 DE))))
    , testCase "INC D               " (z80instTest (TI [0x14                        ] (INC D)))
    , testCase "DEC D               " (z80instTest (TI [0x15                        ] (DEC D)))
    , testCase "LD D,N              " (z80instTest (TI [0x16, 0x12                  ] (LD (Reg8Imm D 0x12))))
    , testCase "RLA                 " (z80instTest (TI [0x17                        ] RLA))
    , testCase "JR $+2              " (z80instTest (TI [0x18, 0xfe                  ] (JR (AbsAddr 0xe0))))
    , testCase "ADD HL,DE           " (z80instTest (TI [0x19                        ] (ADD16 DestHL (RPair16 DE))))
    , testCase "LD A,(DE)           " (z80instTest (TI [0x1A                        ] (LD AccDEIndirect)))
    , testCase "DEC DE              " (z80instTest (TI [0x1B                        ] (DEC16 (RPair16 DE))))
    , testCase "INC E               " (z80instTest (TI [0x1C                        ] (INC E)))
    , testCase "DEC E               " (z80instTest (TI [0x1D                        ] (DEC E)))
    , testCase "LD E,N              " (z80instTest (TI [0x1E, 0x34                  ] (LD (Reg8Imm E 0x34))))
    , testCase "RRA                 " (z80instTest (TI [0x1F                        ] RRA))
    , testCase "JR NZ,$+2           " (z80instTest (TI [0x20, 0xfe                  ] (JRCC NZ (AbsAddr 0xe0))))
    , testCase "LD HL,NN            " (z80instTest (TI [0x21, 0x56, 0x78            ] (LD (RPair16ImmLoad (RPair16 HL) (AbsAddr 0x7856)))))
    , testCase "LD (NN),HL          " (z80instTest (TI [0x22, 0x9a, 0xbc            ] (LD (RPIndirectStore (RPair16 HL) (AbsAddr 0xbc9a)))))
    , testCase "INC HL              " (z80instTest (TI [0x23                        ] (INC16 (RPair16 HL))))
    , testCase "INC H               " (z80instTest (TI [0x24                        ] (INC H)))
    , testCase "DEC H               " (z80instTest (TI [0x25                        ] (DEC H)))
    , testCase "LD H,N              " (z80instTest (TI [0x26, 0xde                  ] (LD (Reg8Imm H 0xde))))
    , testCase "DAA                 " (z80instTest (TI [0x27                        ] DAA))
    , testCase "JR Z,$+2            " (z80instTest (TI [0x28, 0xfe                  ] (JRCC Z (AbsAddr 0xe0))))
    , testCase "ADD HL,HL           " (z80instTest (TI [0x29                        ] (ADD16 DestHL (RPair16 HL))))
    , testCase "LD HL,(NN)          " (z80instTest (TI [0x2A, 0x0f, 0x12            ] (LD (RPIndirectLoad (RPair16 HL) (AbsAddr 0x120f)))))
    , testCase "DEC HL              " (z80instTest (TI [0x2B                        ] (DEC16 (RPair16 HL))))
    , testCase "INC L               " (z80instTest (TI [0x2C                        ] (INC L)))
    , testCase "DEC L               " (z80instTest (TI [0x2D                        ] (DEC L)))
    , testCase "LD L,N              " (z80instTest (TI [0x2E, 0x34                  ] (LD (Reg8Imm L 0x34))))
    , testCase "CPL                 " (z80instTest (TI [0x2F                        ] CPL))
    , testCase "JR NC,$+2           " (z80instTest (TI [0x30, 0xfe                  ] (JRCC NC (AbsAddr 0xe0))))
    , testCase "LD SP,NN            " (z80instTest (TI [0x31, 0x56, 0x78            ] (LD (RPair16ImmLoad SP (AbsAddr 0x7856)))))
    , testCase "LD (NN),A           " (z80instTest (TI [0x32, 0x9a, 0xbc            ] (LD (Imm16IndirectStore (AbsAddr 0xbc9a)))))
    , testCase "INC SP              " (z80instTest (TI [0x33                        ] (INC16 SP)))
    , testCase "INC (HL)            " (z80instTest (TI [0x34                        ] (INC HLindirect)))
    , testCase "DEC (HL)            " (z80instTest (TI [0x35                        ] (DEC HLindirect)))
    , testCase "LD (HL),N           " (z80instTest (TI [0x36, 0xde                  ] (LD (Reg8Imm HLindirect 0xde))))
    , testCase "SCF                 " (z80instTest (TI [0x37                        ] SCF))
    , testCase "JR C,$+2            " (z80instTest (TI [0x38, 0xfe                  ] (JRCC CY (AbsAddr 0xe0))))
    , testCase "ADD HL,SP           " (z80instTest (TI [0x39                        ] (ADD16 DestHL SP)))
    , testCase "LD A,(NN)           " (z80instTest (TI [0x3A, 0x0f, 0x12            ] (LD (AccImm16Indirect (AbsAddr 0x120f)))))
    , testCase "DEC SP              " (z80instTest (TI [0x3B                        ] (DEC16 SP)))
    , testCase "INC A               " (z80instTest (TI [0x3C                        ] (INC A)))
    , testCase "DEC A               " (z80instTest (TI [0x3D                        ] (DEC A)))
    , testCase "LD A,N              " (z80instTest (TI [0x3E, 0x34                  ] (LD (Reg8Imm A 0x34))))
    , testCase "CCF                 " (z80instTest (TI [0x3F                        ] CCF))
    , testCase "LD B,B              " (z80instTest (TI [0x40                        ] (LD (Reg8Reg8 B B))))
    , testCase "LD B,C              " (z80instTest (TI [0x41                        ] (LD (Reg8Reg8 B C))))
    , testCase "LD B,D              " (z80instTest (TI [0x42                        ] (LD (Reg8Reg8 B D))))
    , testCase "LD B,E              " (z80instTest (TI [0x43                        ] (LD (Reg8Reg8 B E))))
    , testCase "LD B,H              " (z80instTest (TI [0x44                        ] (LD (Reg8Reg8 B H))))
    , testCase "LD B,L              " (z80instTest (TI [0x45                        ] (LD (Reg8Reg8 B L))))
    , testCase "LD B,(HL)           " (z80instTest (TI [0x46                        ] (LD (Reg8Reg8 B HLindirect))))
    , testCase "LD B,A              " (z80instTest (TI [0x47                        ] (LD (Reg8Reg8 B A))))
    , testCase "LD C,B              " (z80instTest (TI [0x48                        ] (LD (Reg8Reg8 C B))))
    , testCase "LD C,C              " (z80instTest (TI [0x49                        ] (LD (Reg8Reg8 C C))))
    , testCase "LD C,D              " (z80instTest (TI [0x4A                        ] (LD (Reg8Reg8 C D))))
    , testCase "LD C,E              " (z80instTest (TI [0x4B                        ] (LD (Reg8Reg8 C E))))
    , testCase "LD C,H              " (z80instTest (TI [0x4C                        ] (LD (Reg8Reg8 C H))))
    , testCase "LD C,L              " (z80instTest (TI [0x4D                        ] (LD (Reg8Reg8 C L))))
    , testCase "LD C,(HL)           " (z80instTest (TI [0x4E                        ] (LD (Reg8Reg8 C HLindirect))))
    , testCase "LD C,A              " (z80instTest (TI [0x4F                        ] (LD (Reg8Reg8 C A))))
    , testCase "LD D,B              " (z80instTest (TI [0x50                        ] (LD (Reg8Reg8 D B))))
    , testCase "LD D,C              " (z80instTest (TI [0x51                        ] (LD (Reg8Reg8 D C))))
    , testCase "LD D,D              " (z80instTest (TI [0x52                        ] (LD (Reg8Reg8 D D))))
    , testCase "LD D,E              " (z80instTest (TI [0x53                        ] (LD (Reg8Reg8 D E))))
    , testCase "LD D,H              " (z80instTest (TI [0x54                        ] (LD (Reg8Reg8 D H))))
    , testCase "LD D,L              " (z80instTest (TI [0x55                        ] (LD (Reg8Reg8 D L))))
    , testCase "LD D,(HL)           " (z80instTest (TI [0x56                        ] (LD (Reg8Reg8 D HLindirect))))
    , testCase "LD D,A              " (z80instTest (TI [0x57                        ] (LD (Reg8Reg8 D A))))
    , testCase "LD E,B              " (z80instTest (TI [0x58                        ] (LD (Reg8Reg8 E B))))
    , testCase "LD E,C              " (z80instTest (TI [0x59                        ] (LD (Reg8Reg8 E C))))
    , testCase "LD E,D              " (z80instTest (TI [0x5A                        ] (LD (Reg8Reg8 E D))))
    , testCase "LD E,E              " (z80instTest (TI [0x5B                        ] (LD (Reg8Reg8 E E))))
    , testCase "LD E,H              " (z80instTest (TI [0x5C                        ] (LD (Reg8Reg8 E H))))
    , testCase "LD E,L              " (z80instTest (TI [0x5D                        ] (LD (Reg8Reg8 E L))))
    , testCase "LD E,(HL)           " (z80instTest (TI [0x5E                        ] (LD (Reg8Reg8 E HLindirect))))
    , testCase "LD E,A              " (z80instTest (TI [0x5F                        ] (LD (Reg8Reg8 E A))))
    , testCase "LD H,B              " (z80instTest (TI [0x60                        ] (LD (Reg8Reg8 H B))))
    , testCase "LD H,C              " (z80instTest (TI [0x61                        ] (LD (Reg8Reg8 H C))))
    , testCase "LD H,D              " (z80instTest (TI [0x62                        ] (LD (Reg8Reg8 H D))))
    , testCase "LD H,E              " (z80instTest (TI [0x63                        ] (LD (Reg8Reg8 H E))))
    , testCase "LD H,H              " (z80instTest (TI [0x64                        ] (LD (Reg8Reg8 H H))))
    , testCase "LD H,L              " (z80instTest (TI [0x65                        ] (LD (Reg8Reg8 H L))))
    , testCase "LD H,(HL)           " (z80instTest (TI [0x66                        ] (LD (Reg8Reg8 H HLindirect))))
    , testCase "LD H,A              " (z80instTest (TI [0x67                        ] (LD (Reg8Reg8 H A))))
    , testCase "LD L,B              " (z80instTest (TI [0x68                        ] (LD (Reg8Reg8 L B))))
    , testCase "LD L,C              " (z80instTest (TI [0x69                        ] (LD (Reg8Reg8 L C))))
    , testCase "LD L,D              " (z80instTest (TI [0x6A                        ] (LD (Reg8Reg8 L D))))
    , testCase "LD L,E              " (z80instTest (TI [0x6B                        ] (LD (Reg8Reg8 L E))))
    , testCase "LD L,H              " (z80instTest (TI [0x6C                        ] (LD (Reg8Reg8 L H))))
    , testCase "LD L,L              " (z80instTest (TI [0x6D                        ] (LD (Reg8Reg8 L L))))
    , testCase "LD L,(HL)           " (z80instTest (TI [0x6E                        ] (LD (Reg8Reg8 L HLindirect))))
    , testCase "LD L,A              " (z80instTest (TI [0x6F                        ] (LD (Reg8Reg8 L A))))
    , testCase "LD (HL),B           " (z80instTest (TI [0x70                        ] (LD (Reg8Reg8 HLindirect B))))
    , testCase "LD (HL),C           " (z80instTest (TI [0x71                        ] (LD (Reg8Reg8 HLindirect C))))
    , testCase "LD (HL),D           " (z80instTest (TI [0x72                        ] (LD (Reg8Reg8 HLindirect D))))
    , testCase "LD (HL),E           " (z80instTest (TI [0x73                        ] (LD (Reg8Reg8 HLindirect E))))
    , testCase "LD (HL),H           " (z80instTest (TI [0x74                        ] (LD (Reg8Reg8 HLindirect H))))
    , testCase "LD (HL),L           " (z80instTest (TI [0x75                        ] (LD (Reg8Reg8 HLindirect L))))
    , testCase "HALT                " (z80instTest (TI [0x76                        ] HALT))
    , testCase "LD (HL),A           " (z80instTest (TI [0x77                        ] (LD (Reg8Reg8 HLindirect A))))
    , testCase "LD A,B              " (z80instTest (TI [0x78                        ] (LD (Reg8Reg8 A B))))
    , testCase "LD A,C              " (z80instTest (TI [0x79                        ] (LD (Reg8Reg8 A C))))
    , testCase "LD A,D              " (z80instTest (TI [0x7A                        ] (LD (Reg8Reg8 A D))))
    , testCase "LD A,E              " (z80instTest (TI [0x7B                        ] (LD (Reg8Reg8 A E))))
    , testCase "LD A,H              " (z80instTest (TI [0x7C                        ] (LD (Reg8Reg8 A H))))
    , testCase "LD A,L              " (z80instTest (TI [0x7D                        ] (LD (Reg8Reg8 A L))))
    , testCase "LD A,(HL)           " (z80instTest (TI [0x7E                        ] (LD (Reg8Reg8 A HLindirect))))
    , testCase "LD A,A              " (z80instTest (TI [0x7F                        ] (LD (Reg8Reg8 A A))))
    , testCase "ADD A,B             " (z80instTest (TI [0x80                        ] (ADD8 (ALUAcc (ALUreg8 B)))))
    , testCase "ADD A,C             " (z80instTest (TI [0x81                        ] (ADD8 (ALUAcc (ALUreg8 C)))))
    , testCase "ADD A,D             " (z80instTest (TI [0x82                        ] (ADD8 (ALUAcc (ALUreg8 D)))))
    , testCase "ADD A,E             " (z80instTest (TI [0x83                        ] (ADD8 (ALUAcc (ALUreg8 E)))))
    , testCase "ADD A,H             " (z80instTest (TI [0x84                        ] (ADD8 (ALUAcc (ALUreg8 H)))))
    , testCase "ADD A,L             " (z80instTest (TI [0x85                        ] (ADD8 (ALUAcc (ALUreg8 L)))))
    , testCase "ADD A,(HL)          " (z80instTest (TI [0x86                        ] (ADD8 (ALUAcc (ALUreg8 HLindirect)))))
    , testCase "ADD A,A             " (z80instTest (TI [0x87                        ] (ADD8 (ALUAcc (ALUreg8 A)))))
    , testCase "ADC A,B             " (z80instTest (TI [0x88                        ] (ADC8 (ALUAcc (ALUreg8 B)))))
    , testCase "ADC A,C             " (z80instTest (TI [0x89                        ] (ADC8 (ALUAcc (ALUreg8 C)))))
    , testCase "ADC A,D             " (z80instTest (TI [0x8A                        ] (ADC8 (ALUAcc (ALUreg8 D)))))
    , testCase "ADC A,E             " (z80instTest (TI [0x8B                        ] (ADC8 (ALUAcc (ALUreg8 E)))))
    , testCase "ADC A,H             " (z80instTest (TI [0x8C                        ] (ADC8 (ALUAcc (ALUreg8 H)))))
    , testCase "ADC A,L             " (z80instTest (TI [0x8D                        ] (ADC8 (ALUAcc (ALUreg8 L)))))
    , testCase "ADC A,(HL)          " (z80instTest (TI [0x8E                        ] (ADC8 (ALUAcc (ALUreg8 HLindirect)))))
    , testCase "ADC A,A             " (z80instTest (TI [0x8F                        ] (ADC8 (ALUAcc (ALUreg8 A)))))
    , testCase "SUB B               " (z80instTest (TI [0x90                        ] (SUB (ALUreg8 B))))
    , testCase "SUB C               " (z80instTest (TI [0x91                        ] (SUB (ALUreg8 C))))
    , testCase "SUB D               " (z80instTest (TI [0x92                        ] (SUB (ALUreg8 D))))
    , testCase "SUB E               " (z80instTest (TI [0x93                        ] (SUB (ALUreg8 E))))
    , testCase "SUB H               " (z80instTest (TI [0x94                        ] (SUB (ALUreg8 H))))
    , testCase "SUB L               " (z80instTest (TI [0x95                        ] (SUB (ALUreg8 L))))
    , testCase "SUB (HL)            " (z80instTest (TI [0x96                        ] (SUB (ALUreg8 HLindirect))))
    , testCase "SUB A               " (z80instTest (TI [0x97                        ] (SUB (ALUreg8 A))))
    , testCase "SBC B               " (z80instTest (TI [0x98                        ] (SBC8 (ALUAcc (ALUreg8 B)))))
    , testCase "SBC C               " (z80instTest (TI [0x99                        ] (SBC8 (ALUAcc (ALUreg8 C)))))
    , testCase "SBC D               " (z80instTest (TI [0x9A                        ] (SBC8 (ALUAcc (ALUreg8 D)))))
    , testCase "SBC E               " (z80instTest (TI [0x9B                        ] (SBC8 (ALUAcc (ALUreg8 E)))))
    , testCase "SBC H               " (z80instTest (TI [0x9C                        ] (SBC8 (ALUAcc (ALUreg8 H)))))
    , testCase "SBC L               " (z80instTest (TI [0x9D                        ] (SBC8 (ALUAcc (ALUreg8 L)))))
    , testCase "SBC (HL)            " (z80instTest (TI [0x9E                        ] (SBC8 (ALUAcc (ALUreg8 HLindirect)))))
    , testCase "SBC A               " (z80instTest (TI [0x9F                        ] (SBC8 (ALUAcc (ALUreg8 A)))))
    , testCase "AND B               " (z80instTest (TI [0xA0                        ] (AND (ALUreg8 B))))
    , testCase "AND C               " (z80instTest (TI [0xA1                        ] (AND (ALUreg8 C))))
    , testCase "AND D               " (z80instTest (TI [0xA2                        ] (AND (ALUreg8 D))))
    , testCase "AND E               " (z80instTest (TI [0xA3                        ] (AND (ALUreg8 E))))
    , testCase "AND H               " (z80instTest (TI [0xA4                        ] (AND (ALUreg8 H))))
    , testCase "AND L               " (z80instTest (TI [0xA5                        ] (AND (ALUreg8 L))))
    , testCase "AND (HL)            " (z80instTest (TI [0xA6                        ] (AND (ALUreg8 HLindirect))))
    , testCase "AND A               " (z80instTest (TI [0xA7                        ] (AND (ALUreg8 A))))
    , testCase "XOR B               " (z80instTest (TI [0xA8                        ] (XOR (ALUreg8 B))))
    , testCase "XOR C               " (z80instTest (TI [0xA9                        ] (XOR (ALUreg8 C))))
    , testCase "XOR D               " (z80instTest (TI [0xAA                        ] (XOR (ALUreg8 D))))
    , testCase "XOR E               " (z80instTest (TI [0xAB                        ] (XOR (ALUreg8 E))))
    , testCase "XOR H               " (z80instTest (TI [0xAC                        ] (XOR (ALUreg8 H))))
    , testCase "XOR L               " (z80instTest (TI [0xAD                        ] (XOR (ALUreg8 L))))
    , testCase "XOR (HL)            " (z80instTest (TI [0xAE                        ] (XOR (ALUreg8 HLindirect))))
    , testCase "XOR A               " (z80instTest (TI [0xAF                        ] (XOR (ALUreg8 A))))
    , testCase "OR B                " (z80instTest (TI [0xB0                        ] (OR (ALUreg8 B))))
    , testCase "OR C                " (z80instTest (TI [0xB1                        ] (OR (ALUreg8 C))))
    , testCase "OR D                " (z80instTest (TI [0xB2                        ] (OR (ALUreg8 D))))
    , testCase "OR E                " (z80instTest (TI [0xB3                        ] (OR (ALUreg8 E))))
    , testCase "OR H                " (z80instTest (TI [0xB4                        ] (OR (ALUreg8 H))))
    , testCase "OR L                " (z80instTest (TI [0xB5                        ] (OR (ALUreg8 L))))
    , testCase "OR (HL)             " (z80instTest (TI [0xB6                        ] (OR (ALUreg8 HLindirect))))
    , testCase "OR A                " (z80instTest (TI [0xB7                        ] (OR (ALUreg8 A))))
    , testCase "CP B                " (z80instTest (TI [0xB8                        ] (CP (ALUreg8 B))))
    , testCase "CP C                " (z80instTest (TI [0xB9                        ] (CP (ALUreg8 C))))
    , testCase "CP D                " (z80instTest (TI [0xBA                        ] (CP (ALUreg8 D))))
    , testCase "CP E                " (z80instTest (TI [0xBB                        ] (CP (ALUreg8 E))))
    , testCase "CP H                " (z80instTest (TI [0xBC                        ] (CP (ALUreg8 H))))
    , testCase "CP L                " (z80instTest (TI [0xBD                        ] (CP (ALUreg8 L))))
    , testCase "CP (HL)             " (z80instTest (TI [0xBE                        ] (CP (ALUreg8 HLindirect))))
    , testCase "CP A                " (z80instTest (TI [0xBF                        ] (CP (ALUreg8 A))))
    , testCase "RET NZ              " (z80instTest (TI [0xC0                        ] (RETCC NZ)))
    , testCase "POP BC              " (z80instTest (TI [0xC1                        ] (POP (AFPair16 BC))))
    , testCase "JP NZ,$+3           " (z80instTest (TI [0xC2, 0x78, 0x56            ] (JPCC NZ (AbsAddr 0x5678))))
    , testCase "JP $+3              " (z80instTest (TI [0xC3, 0x34, 0x12            ] (JP (AbsAddr 0x1234))))
    , testCase "CALL NZ,NN          " (z80instTest (TI [0xC4, 0x56, 0x78            ] (CALLCC NZ (AbsAddr 0x7856))))
    , testCase "PUSH BC             " (z80instTest (TI [0xC5                        ] (PUSH (AFPair16 BC))))
    , testCase "ADD A,N             " (z80instTest (TI [0xC6, 0x9a                  ] (ADD8 (ALUAcc (ALUimm 0x9a)))))
    , testCase "RST 0               " (z80instTest (TI [0xC7                        ] (RST 0)))
    , testCase "RET Z               " (z80instTest (TI [0xC8                        ] (RETCC Z)))
    , testCase "RET                 " (z80instTest (TI [0xC9                        ] RET))
    , testCase "JP Z,$+3            " (z80instTest (TI [0xCA, 0xbb, 0xaa             ] (JPCC Z (AbsAddr 0xaabb))))
    , testCase "CALL Z,NN           " (z80instTest (TI [0xCC, 0x56, 0x78            ] (CALLCC Z (AbsAddr 0x7856))))
    , testCase "CALL NN             " (z80instTest (TI [0xCD, 0x9a, 0xbc            ] (CALL (AbsAddr 0xbc9a))))
    , testCase "ADC A,N             " (z80instTest (TI [0xCE, 0xde                  ] (ADC8 (ALUAcc (ALUimm 0xde)))))
    , testCase "RST 8H              " (z80instTest (TI [0xCF                        ] (RST 8)))
    , testCase "RET NC              " (z80instTest (TI [0xD0                        ] (RETCC NC)))
    , testCase "POP DE              " (z80instTest (TI [0xD1                        ] (POP (AFPair16 DE))))
    , testCase "JP NC,$+3           " (z80instTest (TI [0xD2, 0xdd, 0xcc            ] (JPCC NC  (AbsAddr 0xccdd))))
    , testCase "OUT (N),A           " (z80instTest (TI [0xD3, 0x0f                  ] (OUT (PortImm 0x0f))))
    , testCase "CALL NC,NN          " (z80instTest (TI [0xD4, 0x12, 0x34            ] (CALLCC NC (AbsAddr 0x3412))))
    , testCase "PUSH DE             " (z80instTest (TI [0xD5                        ] (PUSH (AFPair16 DE))))
    , testCase "SUB N               " (z80instTest (TI [0xD6, 0x9a                  ] (SUB (ALUimm 0x9a))))
    , testCase "RST 10H             " (z80instTest (TI [0xD7                        ] (RST 0x10)))
    , testCase "RET C               " (z80instTest (TI [0xD8                        ] (RETCC CY)))
    , testCase "EXX                 " (z80instTest (TI [0xD9                        ] (EXC Primes)))
    , testCase "JP C,$+3            " (z80instTest (TI [0xDA, 0x54, 0xa4            ] (JPCC CY (AbsAddr 0xa454))))
    , testCase "IN A,(N)            " (z80instTest (TI [0xDB, 0xbc                  ] (IN (PortImm 0xbc))))
    , testCase "CALL C,NN           " (z80instTest (TI [0xDC, 0xde, 0x0f            ] (CALLCC CY (AbsAddr 0x0fde))))
    , testCase "SBC A,N             " (z80instTest (TI [0xDE, 0x56                  ] (SBC8 (ALUAcc (ALUimm 0x56)))))
    , testCase "RST 18H             " (z80instTest (TI [0xDF                        ] (RST 0x18)))
    , testCase "RET PO              " (z80instTest (TI [0xE0                        ] (RETCC PO)))
    , testCase "POP HL              " (z80instTest (TI [0xE1                        ] (POP (AFPair16 HL))))
    , testCase "JP PO,$+3           " (z80instTest (TI [0xE2, 0x03, 0x61            ] (JPCC PO (AbsAddr 0x6103))))
    , testCase "EX (SP),HL          " (z80instTest (TI [0xE3                        ] (EXC SPHL)))
    , testCase "CALL PO,NN          " (z80instTest (TI [0xE4, 0x78, 0x9a            ] (CALLCC PO (AbsAddr 0x9a78))))
    , testCase "PUSH HL             " (z80instTest (TI [0xE5                        ] (PUSH (AFPair16 HL))))
    , testCase "AND N               " (z80instTest (TI [0xE6, 0xbc                  ] (AND (ALUimm 0xbc))))
    , testCase "RST 20H             " (z80instTest (TI [0xE7                        ] (RST 0x20)))
    , testCase "RET PE              " (z80instTest (TI [0xE8                        ] (RETCC PE)))
    , testCase "JP (HL)             " (z80instTest (TI [0xE9                        ] JPHL))
    , testCase "JP PE,$+3           " (z80instTest (TI [0xEA, 0x35, 0x9f            ] (JPCC PE (AbsAddr 0x9f35))))
    , testCase "EX DE,HL            " (z80instTest (TI [0xEB                        ] (EXC DEHL)))
    , testCase "CALL PE,NN          " (z80instTest (TI [0xEC, 0xde, 0x0f            ] (CALLCC PE (AbsAddr 0x0fde))))
    , testCase "XOR N               " (z80instTest (TI [0xEE, 0x12                  ] (XOR (ALUimm 0x12))))
    , testCase "RST 28H             " (z80instTest (TI [0xEF                        ] (RST 0x28)))
    , testCase "RET P               " (z80instTest (TI [0xF0                        ] (RETCC POS)))
    , testCase "POP AF              " (z80instTest (TI [0xF1                        ] (POP AF)))
    , testCase "JP P,$+3            " (z80instTest (TI [0xF2, 0xcd, 0xab            ] (JPCC POS (AbsAddr 0xabcd))))
    , testCase "DI                  " (z80instTest (TI [0xF3                        ] DI))
    , testCase "CALL P,NN           " (z80instTest (TI [0xF4, 0x34, 0x56            ] (CALLCC POS (AbsAddr 0x5634))))
    , testCase "PUSH AF             " (z80instTest (TI [0xF5                        ] (PUSH AF)))
    , testCase "OR N                " (z80instTest (TI [0xF6, 0x78                  ] (OR (ALUimm 0x78))))
    , testCase "RST 30H             " (z80instTest (TI [0xF7                        ] (RST 0x30)))
    , testCase "RET M               " (z80instTest (TI [0xF8                        ] (RETCC MI)))
    , testCase "LD SP,HL            " (z80instTest (TI [0xF9                        ] LDSPHL))
    , testCase "JP M,$+3            " (z80instTest (TI [0xFA, 0x44, 0x99            ] (JPCC MI (AbsAddr 0x9944))))
    , testCase "EI                  " (z80instTest (TI [0xFB                        ] EI))
    , testCase "CALL M,NN           " (z80instTest (TI [0xFC, 0x9a, 0xbc            ] (CALLCC MI (AbsAddr 0xbc9a))))
    , testCase "CP N                " (z80instTest (TI [0xFE, 0xde                  ] (CP (ALUimm 0xde))))
    , testCase "RST 38H             " (z80instTest (TI [0xFF                        ] (RST 0x38)))
    ]
  , testGroup "0xcb prefix (RLC/RL/RR/SLA/SRA/SLL/SRL/BIT/SET/RESET instructions)"
    [ testCase "RLC B               " (z80instTest (TI [0xCB, 0x00                  ] (RLC B)))
    , testCase "RLC C               " (z80instTest (TI [0xCB, 0x01                  ] (RLC C)))
    , testCase "RLC D               " (z80instTest (TI [0xCB, 0x02                  ] (RLC D)))
    , testCase "RLC E               " (z80instTest (TI [0xCB, 0x03                  ] (RLC E)))
    , testCase "RLC H               " (z80instTest (TI [0xCB, 0x04                  ] (RLC H)))
    , testCase "RLC L               " (z80instTest (TI [0xCB, 0x05                  ] (RLC L)))
    , testCase "RLC (HL)            " (z80instTest (TI [0xCB, 0x06                  ] (RLC HLindirect)))
    , testCase "RLC A               " (z80instTest (TI [0xCB, 0x07                  ] (RLC A)))
    , testCase "RRC B               " (z80instTest (TI [0xCB, 0x08                  ] (RRC B)))
    , testCase "RRC C               " (z80instTest (TI [0xCB, 0x09                  ] (RRC C)))
    , testCase "RRC D               " (z80instTest (TI [0xCB, 0x0A                  ] (RRC D)))
    , testCase "RRC E               " (z80instTest (TI [0xCB, 0x0B                  ] (RRC E)))
    , testCase "RRC H               " (z80instTest (TI [0xCB, 0x0C                  ] (RRC H)))
    , testCase "RRC L               " (z80instTest (TI [0xCB, 0x0D                  ] (RRC L)))
    , testCase "RRC (HL)            " (z80instTest (TI [0xCB, 0x0E                  ] (RRC HLindirect)))
    , testCase "RRC A               " (z80instTest (TI [0xCB, 0x0F                  ] (RRC A)))
    , testCase "RL  B               " (z80instTest (TI [0xCB, 0x10                  ] (RL  B)))
    , testCase "RL  C               " (z80instTest (TI [0xCB, 0x11                  ] (RL  C)))
    , testCase "RL  D               " (z80instTest (TI [0xCB, 0x12                  ] (RL  D)))
    , testCase "RL  E               " (z80instTest (TI [0xCB, 0x13                  ] (RL  E)))
    , testCase "RL  H               " (z80instTest (TI [0xCB, 0x14                  ] (RL  H)))
    , testCase "RL  L               " (z80instTest (TI [0xCB, 0x15                  ] (RL  L)))
    , testCase "RL  (HL)            " (z80instTest (TI [0xCB, 0x16                  ] (RL  HLindirect)))
    , testCase "RL  A               " (z80instTest (TI [0xCB, 0x17                  ] (RL  A)))
    , testCase "RR  B               " (z80instTest (TI [0xCB, 0x18                  ] (RR  B)))
    , testCase "RR  C               " (z80instTest (TI [0xCB, 0x19                  ] (RR  C)))
    , testCase "RR  D               " (z80instTest (TI [0xCB, 0x1A                  ] (RR  D)))
    , testCase "RR  E               " (z80instTest (TI [0xCB, 0x1B                  ] (RR  E)))
    , testCase "RR  H               " (z80instTest (TI [0xCB, 0x1C                  ] (RR  H)))
    , testCase "RR  L               " (z80instTest (TI [0xCB, 0x1D                  ] (RR  L)))
    , testCase "RR  (HL)            " (z80instTest (TI [0xCB, 0x1E                  ] (RR  HLindirect)))
    , testCase "RR  A               " (z80instTest (TI [0xCB, 0x1F                  ] (RR  A)))
    , testCase "SLA B               " (z80instTest (TI [0xCB, 0x20                  ] (SLA B)))
    , testCase "SLA C               " (z80instTest (TI [0xCB, 0x21                  ] (SLA C)))
    , testCase "SLA D               " (z80instTest (TI [0xCB, 0x22                  ] (SLA D)))
    , testCase "SLA E               " (z80instTest (TI [0xCB, 0x23                  ] (SLA E)))
    , testCase "SLA H               " (z80instTest (TI [0xCB, 0x24                  ] (SLA H)))
    , testCase "SLA L               " (z80instTest (TI [0xCB, 0x25                  ] (SLA L)))
    , testCase "SLA (HL)            " (z80instTest (TI [0xCB, 0x26                  ] (SLA HLindirect)))
    , testCase "SLA A               " (z80instTest (TI [0xCB, 0x27                  ] (SLA A)))
    , testCase "SRA B               " (z80instTest (TI [0xCB, 0x28                  ] (SRA B)))
    , testCase "SRA C               " (z80instTest (TI [0xCB, 0x29                  ] (SRA C)))
    , testCase "SRA D               " (z80instTest (TI [0xCB, 0x2A                  ] (SRA D)))
    , testCase "SRA E               " (z80instTest (TI [0xCB, 0x2B                  ] (SRA E)))
    , testCase "SRA H               " (z80instTest (TI [0xCB, 0x2C                  ] (SRA H)))
    , testCase "SRA L               " (z80instTest (TI [0xCB, 0x2D                  ] (SRA L)))
    , testCase "SRA (HL)            " (z80instTest (TI [0xCB, 0x2E                  ] (SRA HLindirect)))
    , testCase "SRA A               " (z80instTest (TI [0xCB, 0x2F                  ] (SRA A)))
    , testCase "SLL B               " (z80instTest (TI [0xCB, 0x30                  ] (SLL B)))
    , testCase "SLL C               " (z80instTest (TI [0xCB, 0x31                  ] (SLL C)))
    , testCase "SLL D               " (z80instTest (TI [0xCB, 0x32                  ] (SLL D)))
    , testCase "SLL E               " (z80instTest (TI [0xCB, 0x33                  ] (SLL E)))
    , testCase "SLL H               " (z80instTest (TI [0xCB, 0x34                  ] (SLL H)))
    , testCase "SLL L               " (z80instTest (TI [0xCB, 0x35                  ] (SLL L)))
    , testCase "SLL (HL)            " (z80instTest (TI [0xCB, 0x36                  ] (SLL HLindirect)))
    , testCase "SLL A               " (z80instTest (TI [0xCB, 0x37                  ] (SLL A)))
    , testCase "SRL B               " (z80instTest (TI [0xCB, 0x38                  ] (SRL B)))
    , testCase "SRL C               " (z80instTest (TI [0xCB, 0x39                  ] (SRL C)))
    , testCase "SRL D               " (z80instTest (TI [0xCB, 0x3A                  ] (SRL D)))
    , testCase "SRL E               " (z80instTest (TI [0xCB, 0x3B                  ] (SRL E)))
    , testCase "SRL H               " (z80instTest (TI [0xCB, 0x3C                  ] (SRL H)))
    , testCase "SRL L               " (z80instTest (TI [0xCB, 0x3D                  ] (SRL L)))
    , testCase "SRL (HL)            " (z80instTest (TI [0xCB, 0x3E                  ] (SRL HLindirect)))
    , testCase "SRL A               " (z80instTest (TI [0xCB, 0x3F                  ] (SRL A)))
    , testCase "BIT 0,B             " (z80instTest (TI [0xCB, 0x40                  ] (BIT 0 B)))
    , testCase "BIT 0,C             " (z80instTest (TI [0xCB, 0x41                  ] (BIT 0 C)))
    , testCase "BIT 0,D             " (z80instTest (TI [0xCB, 0x42                  ] (BIT 0 D)))
    , testCase "BIT 0,E             " (z80instTest (TI [0xCB, 0x43                  ] (BIT 0 E)))
    , testCase "BIT 0,H             " (z80instTest (TI [0xCB, 0x44                  ] (BIT 0 H)))
    , testCase "BIT 0,L             " (z80instTest (TI [0xCB, 0x45                  ] (BIT 0 L)))
    , testCase "BIT 0,(HL)          " (z80instTest (TI [0xCB, 0x46                  ] (BIT 0 HLindirect)))
    , testCase "BIT 0,A             " (z80instTest (TI [0xCB, 0x47                  ] (BIT 0 A)))
    , testCase "BIT 1,B             " (z80instTest (TI [0xCB, 0x48                  ] (BIT 1 B)))
    , testCase "BIT 1,C             " (z80instTest (TI [0xCB, 0x49                  ] (BIT 1 C)))
    , testCase "BIT 1,D             " (z80instTest (TI [0xCB, 0x4A                  ] (BIT 1 D)))
    , testCase "BIT 1,E             " (z80instTest (TI [0xCB, 0x4B                  ] (BIT 1 E)))
    , testCase "BIT 1,H             " (z80instTest (TI [0xCB, 0x4C                  ] (BIT 1 H)))
    , testCase "BIT 1,L             " (z80instTest (TI [0xCB, 0x4D                  ] (BIT 1 L)))
    , testCase "BIT 1,(HL)          " (z80instTest (TI [0xCB, 0x4E                  ] (BIT 1 HLindirect)))
    , testCase "BIT 1,A             " (z80instTest (TI [0xCB, 0x4F                  ] (BIT 1 A)))
    , testCase "BIT 2,B             " (z80instTest (TI [0xCB, 0x50                  ] (BIT 2 B)))
    , testCase "BIT 2,C             " (z80instTest (TI [0xCB, 0x51                  ] (BIT 2 C)))
    , testCase "BIT 2,D             " (z80instTest (TI [0xCB, 0x52                  ] (BIT 2 D)))
    , testCase "BIT 2,E             " (z80instTest (TI [0xCB, 0x53                  ] (BIT 2 E)))
    , testCase "BIT 2,H             " (z80instTest (TI [0xCB, 0x54                  ] (BIT 2 H)))
    , testCase "BIT 2,L             " (z80instTest (TI [0xCB, 0x55                  ] (BIT 2 L)))
    , testCase "BIT 2,(HL)          " (z80instTest (TI [0xCB, 0x56                  ] (BIT 2 HLindirect)))
    , testCase "BIT 2,A             " (z80instTest (TI [0xCB, 0x57                  ] (BIT 2 A)))
    , testCase "BIT 3,B             " (z80instTest (TI [0xCB, 0x58                  ] (BIT 3 B)))
    , testCase "BIT 3,C             " (z80instTest (TI [0xCB, 0x59                  ] (BIT 3 C)))
    , testCase "BIT 3,D             " (z80instTest (TI [0xCB, 0x5A                  ] (BIT 3 D)))
    , testCase "BIT 3,E             " (z80instTest (TI [0xCB, 0x5B                  ] (BIT 3 E)))
    , testCase "BIT 3,H             " (z80instTest (TI [0xCB, 0x5C                  ] (BIT 3 H)))
    , testCase "BIT 3,L             " (z80instTest (TI [0xCB, 0x5D                  ] (BIT 3 L)))
    , testCase "BIT 3,(HL)          " (z80instTest (TI [0xCB, 0x5E                  ] (BIT 3 HLindirect)))
    , testCase "BIT 3,A             " (z80instTest (TI [0xCB, 0x5F                  ] (BIT 3 A)))
    , testCase "BIT 4,B             " (z80instTest (TI [0xCB, 0x60                  ] (BIT 4 B)))
    , testCase "BIT 4,C             " (z80instTest (TI [0xCB, 0x61                  ] (BIT 4 C)))
    , testCase "BIT 4,D             " (z80instTest (TI [0xCB, 0x62                  ] (BIT 4 D)))
    , testCase "BIT 4,E             " (z80instTest (TI [0xCB, 0x63                  ] (BIT 4 E)))
    , testCase "BIT 4,H             " (z80instTest (TI [0xCB, 0x64                  ] (BIT 4 H)))
    , testCase "BIT 4,L             " (z80instTest (TI [0xCB, 0x65                  ] (BIT 4 L)))
    , testCase "BIT 4,(HL)          " (z80instTest (TI [0xCB, 0x66                  ] (BIT 4 HLindirect)))
    , testCase "BIT 4,A             " (z80instTest (TI [0xCB, 0x67                  ] (BIT 4 A)))
    , testCase "BIT 5,B             " (z80instTest (TI [0xCB, 0x68                  ] (BIT 5 B)))
    , testCase "BIT 5,C             " (z80instTest (TI [0xCB, 0x69                  ] (BIT 5 C)))
    , testCase "BIT 5,D             " (z80instTest (TI [0xCB, 0x6A                  ] (BIT 5 D)))
    , testCase "BIT 5,E             " (z80instTest (TI [0xCB, 0x6B                  ] (BIT 5 E)))
    , testCase "BIT 5,H             " (z80instTest (TI [0xCB, 0x6C                  ] (BIT 5 H)))
    , testCase "BIT 5,L             " (z80instTest (TI [0xCB, 0x6D                  ] (BIT 5 L)))
    , testCase "BIT 5,(HL)          " (z80instTest (TI [0xCB, 0x6E                  ] (BIT 5 HLindirect)))
    , testCase "BIT 5,A             " (z80instTest (TI [0xCB, 0x6F                  ] (BIT 5 A)))
    , testCase "BIT 6,B             " (z80instTest (TI [0xCB, 0x70                  ] (BIT 6 B)))
    , testCase "BIT 6,C             " (z80instTest (TI [0xCB, 0x71                  ] (BIT 6 C)))
    , testCase "BIT 6,D             " (z80instTest (TI [0xCB, 0x72                  ] (BIT 6 D)))
    , testCase "BIT 6,E             " (z80instTest (TI [0xCB, 0x73                  ] (BIT 6 E)))
    , testCase "BIT 6,H             " (z80instTest (TI [0xCB, 0x74                  ] (BIT 6 H)))
    , testCase "BIT 6,L             " (z80instTest (TI [0xCB, 0x75                  ] (BIT 6 L)))
    , testCase "BIT 6,(HL)          " (z80instTest (TI [0xCB, 0x76                  ] (BIT 6 HLindirect)))
    , testCase "BIT 6,A             " (z80instTest (TI [0xCB, 0x77                  ] (BIT 6 A)))
    , testCase "BIT 7,B             " (z80instTest (TI [0xCB, 0x78                  ] (BIT 7 B)))
    , testCase "BIT 7,C             " (z80instTest (TI [0xCB, 0x79                  ] (BIT 7 C)))
    , testCase "BIT 7,D             " (z80instTest (TI [0xCB, 0x7A                  ] (BIT 7 D)))
    , testCase "BIT 7,E             " (z80instTest (TI [0xCB, 0x7B                  ] (BIT 7 E)))
    , testCase "BIT 7,H             " (z80instTest (TI [0xCB, 0x7C                  ] (BIT 7 H)))
    , testCase "BIT 7,L             " (z80instTest (TI [0xCB, 0x7D                  ] (BIT 7 L)))
    , testCase "BIT 7,(HL)          " (z80instTest (TI [0xCB, 0x7E                  ] (BIT 7 HLindirect)))
    , testCase "BIT 7,A             " (z80instTest (TI [0xCB, 0x7F                  ] (BIT 7 A)))
    , testCase "RES 0,B             " (z80instTest (TI [0xCB, 0x80                  ] (RES 0 B)))
    , testCase "RES 0,C             " (z80instTest (TI [0xCB, 0x81                  ] (RES 0 C)))
    , testCase "RES 0,D             " (z80instTest (TI [0xCB, 0x82                  ] (RES 0 D)))
    , testCase "RES 0,E             " (z80instTest (TI [0xCB, 0x83                  ] (RES 0 E)))
    , testCase "RES 0,H             " (z80instTest (TI [0xCB, 0x84                  ] (RES 0 H)))
    , testCase "RES 0,L             " (z80instTest (TI [0xCB, 0x85                  ] (RES 0 L)))
    , testCase "RES 0,(HL)          " (z80instTest (TI [0xCB, 0x86                  ] (RES 0 HLindirect)))
    , testCase "RES 0,A             " (z80instTest (TI [0xCB, 0x87                  ] (RES 0 A)))
    , testCase "RES 1,B             " (z80instTest (TI [0xCB, 0x88                  ] (RES 1 B)))
    , testCase "RES 1,C             " (z80instTest (TI [0xCB, 0x89                  ] (RES 1 C)))
    , testCase "RES 1,D             " (z80instTest (TI [0xCB, 0x8A                  ] (RES 1 D)))
    , testCase "RES 1,E             " (z80instTest (TI [0xCB, 0x8B                  ] (RES 1 E)))
    , testCase "RES 1,H             " (z80instTest (TI [0xCB, 0x8C                  ] (RES 1 H)))
    , testCase "RES 1,L             " (z80instTest (TI [0xCB, 0x8D                  ] (RES 1 L)))
    , testCase "RES 1,(HL)          " (z80instTest (TI [0xCB, 0x8E                  ] (RES 1 HLindirect)))
    , testCase "RES 1,A             " (z80instTest (TI [0xCB, 0x8F                  ] (RES 1 A)))
    , testCase "RES 2,B             " (z80instTest (TI [0xCB, 0x90                  ] (RES 2 B)))
    , testCase "RES 2,C             " (z80instTest (TI [0xCB, 0x91                  ] (RES 2 C)))
    , testCase "RES 2,D             " (z80instTest (TI [0xCB, 0x92                  ] (RES 2 D)))
    , testCase "RES 2,E             " (z80instTest (TI [0xCB, 0x93                  ] (RES 2 E)))
    , testCase "RES 2,H             " (z80instTest (TI [0xCB, 0x94                  ] (RES 2 H)))
    , testCase "RES 2,L             " (z80instTest (TI [0xCB, 0x95                  ] (RES 2 L)))
    , testCase "RES 2,(HL)          " (z80instTest (TI [0xCB, 0x96                  ] (RES 2 HLindirect)))
    , testCase "RES 2,A             " (z80instTest (TI [0xCB, 0x97                  ] (RES 2 A)))
    , testCase "RES 3,B             " (z80instTest (TI [0xCB, 0x98                  ] (RES 3 B)))
    , testCase "RES 3,C             " (z80instTest (TI [0xCB, 0x99                  ] (RES 3 C)))
    , testCase "RES 3,D             " (z80instTest (TI [0xCB, 0x9A                  ] (RES 3 D)))
    , testCase "RES 3,E             " (z80instTest (TI [0xCB, 0x9B                  ] (RES 3 E)))
    , testCase "RES 3,H             " (z80instTest (TI [0xCB, 0x9C                  ] (RES 3 H)))
    , testCase "RES 3,L             " (z80instTest (TI [0xCB, 0x9D                  ] (RES 3 L)))
    , testCase "RES 3,(HL)          " (z80instTest (TI [0xCB, 0x9E                  ] (RES 3 HLindirect)))
    , testCase "RES 3,A             " (z80instTest (TI [0xCB, 0x9F                  ] (RES 3 A)))
    , testCase "RES 4,B             " (z80instTest (TI [0xCB, 0xA0                  ] (RES 4 B)))
    , testCase "RES 4,C             " (z80instTest (TI [0xCB, 0xA1                  ] (RES 4 C)))
    , testCase "RES 4,D             " (z80instTest (TI [0xCB, 0xA2                  ] (RES 4 D)))
    , testCase "RES 4,E             " (z80instTest (TI [0xCB, 0xA3                  ] (RES 4 E)))
    , testCase "RES 4,H             " (z80instTest (TI [0xCB, 0xA4                  ] (RES 4 H)))
    , testCase "RES 4,L             " (z80instTest (TI [0xCB, 0xA5                  ] (RES 4 L)))
    , testCase "RES 4,(HL)          " (z80instTest (TI [0xCB, 0xA6                  ] (RES 4 HLindirect)))
    , testCase "RES 4,A             " (z80instTest (TI [0xCB, 0xA7                  ] (RES 4 A)))
    , testCase "RES 5,B             " (z80instTest (TI [0xCB, 0xA8                  ] (RES 5 B)))
    , testCase "RES 5,C             " (z80instTest (TI [0xCB, 0xA9                  ] (RES 5 C)))
    , testCase "RES 5,D             " (z80instTest (TI [0xCB, 0xAA                  ] (RES 5 D)))
    , testCase "RES 5,E             " (z80instTest (TI [0xCB, 0xAB                  ] (RES 5 E)))
    , testCase "RES 5,H             " (z80instTest (TI [0xCB, 0xAC                  ] (RES 5 H)))
    , testCase "RES 5,L             " (z80instTest (TI [0xCB, 0xAD                  ] (RES 5 L)))
    , testCase "RES 5,(HL)          " (z80instTest (TI [0xCB, 0xAE                  ] (RES 5 HLindirect)))
    , testCase "RES 5,A             " (z80instTest (TI [0xCB, 0xAF                  ] (RES 5 A)))
    , testCase "RES 6,B             " (z80instTest (TI [0xCB, 0xB0                  ] (RES 6 B)))
    , testCase "RES 6,C             " (z80instTest (TI [0xCB, 0xB1                  ] (RES 6 C)))
    , testCase "RES 6,D             " (z80instTest (TI [0xCB, 0xB2                  ] (RES 6 D)))
    , testCase "RES 6,E             " (z80instTest (TI [0xCB, 0xB3                  ] (RES 6 E)))
    , testCase "RES 6,H             " (z80instTest (TI [0xCB, 0xB4                  ] (RES 6 H)))
    , testCase "RES 6,L             " (z80instTest (TI [0xCB, 0xB5                  ] (RES 6 L)))
    , testCase "RES 6,(HL)          " (z80instTest (TI [0xCB, 0xB6                  ] (RES 6 HLindirect)))
    , testCase "RES 6,A             " (z80instTest (TI [0xCB, 0xB7                  ] (RES 6 A)))
    , testCase "RES 7,B             " (z80instTest (TI [0xCB, 0xB8                  ] (RES 7 B)))
    , testCase "RES 7,C             " (z80instTest (TI [0xCB, 0xB9                  ] (RES 7 C)))
    , testCase "RES 7,D             " (z80instTest (TI [0xCB, 0xBA                  ] (RES 7 D)))
    , testCase "RES 7,E             " (z80instTest (TI [0xCB, 0xBB                  ] (RES 7 E)))
    , testCase "RES 7,H             " (z80instTest (TI [0xCB, 0xBC                  ] (RES 7 H)))
    , testCase "RES 7,L             " (z80instTest (TI [0xCB, 0xBD                  ] (RES 7 L)))
    , testCase "RES 7,(HL)          " (z80instTest (TI [0xCB, 0xBE                  ] (RES 7 HLindirect)))
    , testCase "RES 7,A             " (z80instTest (TI [0xCB, 0xBF                  ] (RES 7 A)))
    , testCase "SET 0,B             " (z80instTest (TI [0xCB, 0xC0                  ] (SET 0 B)))
    , testCase "SET 0,C             " (z80instTest (TI [0xCB, 0xC1                  ] (SET 0 C)))
    , testCase "SET 0,D             " (z80instTest (TI [0xCB, 0xC2                  ] (SET 0 D)))
    , testCase "SET 0,E             " (z80instTest (TI [0xCB, 0xC3                  ] (SET 0 E)))
    , testCase "SET 0,H             " (z80instTest (TI [0xCB, 0xC4                  ] (SET 0 H)))
    , testCase "SET 0,L             " (z80instTest (TI [0xCB, 0xC5                  ] (SET 0 L)))
    , testCase "SET 0,(HL)          " (z80instTest (TI [0xCB, 0xC6                  ] (SET 0 HLindirect)))
    , testCase "SET 0,A             " (z80instTest (TI [0xCB, 0xC7                  ] (SET 0 A)))
    , testCase "SET 1,B             " (z80instTest (TI [0xCB, 0xC8                  ] (SET 1 B)))
    , testCase "SET 1,C             " (z80instTest (TI [0xCB, 0xC9                  ] (SET 1 C)))
    , testCase "SET 1,D             " (z80instTest (TI [0xCB, 0xCA                  ] (SET 1 D)))
    , testCase "SET 1,E             " (z80instTest (TI [0xCB, 0xCB                  ] (SET 1 E)))
    , testCase "SET 1,H             " (z80instTest (TI [0xCB, 0xCC                  ] (SET 1 H)))
    , testCase "SET 1,L             " (z80instTest (TI [0xCB, 0xCD                  ] (SET 1 L)))
    , testCase "SET 1,(HL)          " (z80instTest (TI [0xCB, 0xCE                  ] (SET 1 HLindirect)))
    , testCase "SET 1,A             " (z80instTest (TI [0xCB, 0xCF                  ] (SET 1 A)))
    , testCase "SET 2,B             " (z80instTest (TI [0xCB, 0xD0                  ] (SET 2 B)))
    , testCase "SET 2,C             " (z80instTest (TI [0xCB, 0xD1                  ] (SET 2 C)))
    , testCase "SET 2,D             " (z80instTest (TI [0xCB, 0xD2                  ] (SET 2 D)))
    , testCase "SET 2,E             " (z80instTest (TI [0xCB, 0xD3                  ] (SET 2 E)))
    , testCase "SET 2,H             " (z80instTest (TI [0xCB, 0xD4                  ] (SET 2 H)))
    , testCase "SET 2,L             " (z80instTest (TI [0xCB, 0xD5                  ] (SET 2 L)))
    , testCase "SET 2,(HL)          " (z80instTest (TI [0xCB, 0xD6                  ] (SET 2 HLindirect)))
    , testCase "SET 2,A             " (z80instTest (TI [0xCB, 0xD7                  ] (SET 2 A)))
    , testCase "SET 3,B             " (z80instTest (TI [0xCB, 0xD8                  ] (SET 3 B)))
    , testCase "SET 3,C             " (z80instTest (TI [0xCB, 0xD9                  ] (SET 3 C)))
    , testCase "SET 3,D             " (z80instTest (TI [0xCB, 0xDA                  ] (SET 3 D)))
    , testCase "SET 3,E             " (z80instTest (TI [0xCB, 0xDB                  ] (SET 3 E)))
    , testCase "SET 3,H             " (z80instTest (TI [0xCB, 0xDC                  ] (SET 3 H)))
    , testCase "SET 3,L             " (z80instTest (TI [0xCB, 0xDD                  ] (SET 3 L)))
    , testCase "SET 3,(HL)          " (z80instTest (TI [0xCB, 0xDE                  ] (SET 3 HLindirect)))
    , testCase "SET 3,A             " (z80instTest (TI [0xCB, 0xDF                  ] (SET 3 A)))
    , testCase "SET 4,B             " (z80instTest (TI [0xCB, 0xE0                  ] (SET 4 B)))
    , testCase "SET 4,C             " (z80instTest (TI [0xCB, 0xE1                  ] (SET 4 C)))
    , testCase "SET 4,D             " (z80instTest (TI [0xCB, 0xE2                  ] (SET 4 D)))
    , testCase "SET 4,E             " (z80instTest (TI [0xCB, 0xE3                  ] (SET 4 E)))
    , testCase "SET 4,H             " (z80instTest (TI [0xCB, 0xE4                  ] (SET 4 H)))
    , testCase "SET 4,L             " (z80instTest (TI [0xCB, 0xE5                  ] (SET 4 L)))
    , testCase "SET 4,(HL)          " (z80instTest (TI [0xCB, 0xE6                  ] (SET 4 HLindirect)))
    , testCase "SET 4,A             " (z80instTest (TI [0xCB, 0xE7                  ] (SET 4 A)))
    , testCase "SET 5,B             " (z80instTest (TI [0xCB, 0xE8                  ] (SET 5 B)))
    , testCase "SET 5,C             " (z80instTest (TI [0xCB, 0xE9                  ] (SET 5 C)))
    , testCase "SET 5,D             " (z80instTest (TI [0xCB, 0xEA                  ] (SET 5 D)))
    , testCase "SET 5,E             " (z80instTest (TI [0xCB, 0xEB                  ] (SET 5 E)))
    , testCase "SET 5,H             " (z80instTest (TI [0xCB, 0xEC                  ] (SET 5 H)))
    , testCase "SET 5,L             " (z80instTest (TI [0xCB, 0xED                  ] (SET 5 L)))
    , testCase "SET 5,(HL)          " (z80instTest (TI [0xCB, 0xEE                  ] (SET 5 HLindirect)))
    , testCase "SET 5,A             " (z80instTest (TI [0xCB, 0xEF                  ] (SET 5 A)))
    , testCase "SET 6,B             " (z80instTest (TI [0xCB, 0xF0                  ] (SET 6 B)))
    , testCase "SET 6,C             " (z80instTest (TI [0xCB, 0xF1                  ] (SET 6 C)))
    , testCase "SET 6,D             " (z80instTest (TI [0xCB, 0xF2                  ] (SET 6 D)))
    , testCase "SET 6,E             " (z80instTest (TI [0xCB, 0xF3                  ] (SET 6 E)))
    , testCase "SET 6,H             " (z80instTest (TI [0xCB, 0xF4                  ] (SET 6 H)))
    , testCase "SET 6,L             " (z80instTest (TI [0xCB, 0xF5                  ] (SET 6 L)))
    , testCase "SET 6,(HL)          " (z80instTest (TI [0xCB, 0xF6                  ] (SET 6 HLindirect)))
    , testCase "SET 6,A             " (z80instTest (TI [0xCB, 0xF7                  ] (SET 6 A)))
    , testCase "SET 7,B             " (z80instTest (TI [0xCB, 0xF8                  ] (SET 7 B)))
    , testCase "SET 7,C             " (z80instTest (TI [0xCB, 0xF9                  ] (SET 7 C)))
    , testCase "SET 7,D             " (z80instTest (TI [0xCB, 0xFA                  ] (SET 7 D)))
    , testCase "SET 7,E             " (z80instTest (TI [0xCB, 0xFB                  ] (SET 7 E)))
    , testCase "SET 7,H             " (z80instTest (TI [0xCB, 0xFC                  ] (SET 7 H)))
    , testCase "SET 7,L             " (z80instTest (TI [0xCB, 0xFD                  ] (SET 7 L)))
    , testCase "SET 7,(HL)          " (z80instTest (TI [0xCB, 0xFE                  ] (SET 7 HLindirect)))
    , testCase "SET 7,A             " (z80instTest (TI [0xCB, 0xFF                  ] (SET 7 A)))
    ]
  , testGroup "0xdd prefix (IX-indexed instructions)"
    [ testCase "0xdd NOP            " (z80instTest (TI [0xdd, 0x00                  ] NOP))
    , testCase "0xdd LD BC,NN       " (z80instTest (TI [0xdd, 0x01, 0x56, 0x78      ] (LD (RPair16ImmLoad (RPair16 BC) (AbsAddr 0x7856)))))
    , testCase "0xdd LD (BC),A      " (z80instTest (TI [0xdd, 0x02                  ] (LD BCIndirectStore)))
    , testCase "0xdd INC BC         " (z80instTest (TI [0xdd, 0x03                  ] (INC16 (RPair16 BC))))
    , testCase "0xdd INC B          " (z80instTest (TI [0xdd, 0x04                  ] (INC B)))
    , testCase "0xdd DEC B          " (z80instTest (TI [0xdd, 0x05                  ] (DEC B)))
    , testCase "0xdd LD B,N         " (z80instTest (TI [0xdd, 0x06, 0x9a            ] (LD (Reg8Imm B 0x9a))))
    , testCase "0xdd RLCA           " (z80instTest (TI [0xdd, 0x07                  ] RLCA))
    , testCase "0xdd EX AF,AF'      " (z80instTest (TI [0xdd, 0x08                  ] (EXC AFAF')))
    , testCase "ADD IX,BC           " (z80instTest (TI [0xDD, 0x09                  ] (ADD16 DestIX (RPair16 BC))))
    , testCase "0xdd LD A,(BC)      " (z80instTest (TI [0xdd, 0x0A                  ] (LD AccBCIndirect)))
    , testCase "0xdd DEC BC         " (z80instTest (TI [0xdd, 0x0B                  ] (DEC16 (RPair16 BC))))
    , testCase "0xdd INC C          " (z80instTest (TI [0xdd, 0x0C                  ] (INC C)))
    , testCase "0xdd DEC C          " (z80instTest (TI [0xdd, 0x0D                  ] (DEC C)))
    , testCase "0xdd LD C,N         " (z80instTest (TI [0xdd, 0x0E, 0xbc            ] (LD (Reg8Imm C 0xbc))))
    , testCase "0xdd RRCA           " (z80instTest (TI [0xdd, 0x0F                  ] RRCA))
    , testCase "0xdd DJNZ $+2       " (z80instTest (TI [0xdd, 0x10, 0xfe            ] (DJNZ (AbsAddr 0xe1))))
    , testCase "0xdd LD DE,NN       " (z80instTest (TI [0xdd, 0x11, 0xde, 0x0f      ] (LD (RPair16ImmLoad (RPair16 DE) (AbsAddr 0x0fde)))))
    , testCase "0xdd LD (DE),A      " (z80instTest (TI [0xdd, 0x12                  ] (LD DEIndirectStore)))
    , testCase "0xdd INC DE         " (z80instTest (TI [0xdd, 0x13                  ] (INC16 (RPair16 DE))))
    , testCase "0xdd INC D          " (z80instTest (TI [0xdd, 0x14                  ] (INC D)))
    , testCase "0xdd DEC D          " (z80instTest (TI [0xdd, 0x15                  ] (DEC D)))
    , testCase "0xdd LD D,N         " (z80instTest (TI [0xdd, 0x16, 0x12            ] (LD (Reg8Imm D 0x12))))
    , testCase "0xdd RLA            " (z80instTest (TI [0xdd, 0x17                  ] RLA))
    , testCase "0xdd JR $+2         " (z80instTest (TI [0xdd, 0x18, 0xfe            ] (JR (AbsAddr 0xe1))))
    , testCase "ADD IX,DE           " (z80instTest (TI [0xdd, 0x19                  ] (ADD16 DestIX (RPair16 DE))))
    , testCase "0xdd LD A,(DE)      " (z80instTest (TI [0xdd, 0x1A                  ] (LD AccDEIndirect)))
    , testCase "0xdd DEC DE         " (z80instTest (TI [0xdd, 0x1B                  ] (DEC16 (RPair16 DE))))
    , testCase "0xdd INC E          " (z80instTest (TI [0xdd, 0x1C                  ] (INC E)))
    , testCase "0xdd DEC E          " (z80instTest (TI [0xdd, 0x1D                  ] (DEC E)))
    , testCase "0xdd LD E,N         " (z80instTest (TI [0xdd, 0x1E, 0x34            ] (LD (Reg8Imm E 0x34))))
    , testCase "0xdd RRA            " (z80instTest (TI [0xdd, 0x1F                  ] RRA))
    , testCase "0xdd JR NZ,$+2      " (z80instTest (TI [0xdd, 0x20, 0xfe            ] (JRCC NZ (AbsAddr 0xe1))))
    , testCase "LD IX,NN            " (z80instTest (TI [0xDD, 0x21, 0x56, 0x78      ] (LD (RPair16ImmLoad (RPair16 IX) (AbsAddr 0x7856)))))
    , testCase "LD (NN),IX          " (z80instTest (TI [0xdd, 0x22, 0x9a, 0xbc      ] (LD (RPIndirectStore (RPair16 IX) (AbsAddr 0xbc9a)))))
    , testCase "INC IX              " (z80instTest (TI [0xdd, 0x23                  ] (INC16 (RPair16 IX))))
    , testCase "INC IXh             " (z80instTest (TI [0xdd, 0x24                  ] (INC IXh)))
    , testCase "DEC IXh             " (z80instTest (TI [0xdd, 0x25                  ] (DEC IXh)))
    , testCase "LD IXh,N            " (z80instTest (TI [0xdd, 0x26, 0xde            ] (LD (Reg8Imm IXh 0xde))))
    , testCase "0xdd DAA            " (z80instTest (TI [0xdd, 0x27                  ] DAA))
    , testCase "0xdd JR Z,$+2       " (z80instTest (TI [0xdd, 0x28, 0xfe            ] (JRCC Z (AbsAddr 0xe1))))
    , testCase "ADD IX,IX           " (z80instTest (TI [0xDD, 0x29                  ] (ADD16 DestIX (RPair16 IX))))
    , testCase "LD IX,(NN)          " (z80instTest (TI [0xDD, 0x2A, 0xde, 0x0f      ] (LD (RPIndirectLoad (RPair16 IX) (AbsAddr 0x0fde)))))
    , testCase "DEC IX              " (z80instTest (TI [0xDD, 0x2B                  ] (DEC16 (RPair16 IX))))
    , testCase "INC IXl             " (z80instTest (TI [0xdd, 0x2C                  ] (INC IXl)))
    , testCase "DEC IXl             " (z80instTest (TI [0xdd, 0x2D                  ] (DEC IXl)))
    , testCase "LD IXl,N            " (z80instTest (TI [0xdd, 0x2E, 0x34            ] (LD (Reg8Imm IXl 0x34))))
    , testCase "0xdd CPL            " (z80instTest (TI [0xdd, 0x2F                  ] CPL))
    , testCase "0xdd JR NC,$+2      " (z80instTest (TI [0xdd, 0x30, 0xfe            ] (JRCC NC (AbsAddr 0xe1))))
    , testCase "0xdd LD SP,NN       " (z80instTest (TI [0xdd, 0x31, 0x56, 0x78      ] (LD (RPair16ImmLoad SP (AbsAddr 0x7856)))))
    , testCase "0xdd LD (NN),A      " (z80instTest (TI [0xdd, 0x32, 0x9a, 0xbc      ] (LD (Imm16IndirectStore (AbsAddr 0xbc9a)))))
    , testCase "0xdd INC SP         " (z80instTest (TI [0xdd, 0x33                  ] (INC16 SP)))
    , testCase "INC (IX+N)          " (z80instTest (TI [0xDD, 0x34, 0x12            ] (INC (IXindirect 0x12))))
    , testCase "DEC (IX+N)          " (z80instTest (TI [0xDD, 0x35, 0x34            ] (DEC (IXindirect 0x34))))
    , testCase "LD (IX+N),N         " (z80instTest (TI [0xDD, 0x36, 0x56, 0x78      ] (LD (Reg8Imm (IXindirect 0x56) 0x78))))
    , testCase "0xdd SCF            " (z80instTest (TI [0xdd, 0x37                  ] SCF))
    , testCase "0xdd JR C,$+2       " (z80instTest (TI [0xdd, 0x38, 0xfe            ] (JRCC CY (AbsAddr 0xe1))))
    , testCase "ADD IX,SP           " (z80instTest (TI [0xdd, 0x39                  ] (ADD16 DestIX SP)))
    , testCase "0xdd LD A,(NN)      " (z80instTest (TI [0xdd, 0x3A, 0x0f, 0x12      ] (LD (AccImm16Indirect (AbsAddr 0x120f)))))
    , testCase "0xdd DEC SP         " (z80instTest (TI [0xdd, 0x3B                  ] (DEC16 SP)))
    , testCase "0xdd INC A          " (z80instTest (TI [0xdd, 0x3C                  ] (INC A)))
    , testCase "0xdd DEC A          " (z80instTest (TI [0xdd, 0x3D                  ] (DEC A)))
    , testCase "0xdd LD A,N         " (z80instTest (TI [0xdd, 0x3E, 0x34            ] (LD (Reg8Imm A 0x34))))
    , testCase "0xdd CCF            " (z80instTest (TI [0xdd, 0x3F                  ] CCF))
    , testCase "0xdd LD B,B         " (z80instTest (TI [0xdd, 0x40                  ] (LD (Reg8Reg8 B B))))
    , testCase "0xdd LD B,C         " (z80instTest (TI [0xdd, 0x41                  ] (LD (Reg8Reg8 B C))))
    , testCase "0xdd LD B,D         " (z80instTest (TI [0xdd, 0x42                  ] (LD (Reg8Reg8 B D))))
    , testCase "0xdd LD B,E         " (z80instTest (TI [0xdd, 0x43                  ] (LD (Reg8Reg8 B E))))
    , testCase "LD B,IXh            " (z80instTest (TI [0xdd, 0x44                  ] (LD (Reg8Reg8 B IXh))))
    , testCase "LD B,IXl            " (z80instTest (TI [0xdd, 0x45                  ] (LD (Reg8Reg8 B IXl))))
    , testCase "LD B,(IX+N)         " (z80instTest (TI [0xDD, 0x46, 0x9a            ] (LD (Reg8Reg8 B (IXindirect (negate 102))))))
    , testCase "0xdd LD B,A         " (z80instTest (TI [0xdd, 0x47                  ] (LD (Reg8Reg8 B A))))
    , testCase "0xdd LD C,B         " (z80instTest (TI [0xdd, 0x48                  ] (LD (Reg8Reg8 C B))))
    , testCase "0xdd LD C,C         " (z80instTest (TI [0xdd, 0x49                  ] (LD (Reg8Reg8 C C))))
    , testCase "0xdd LD C,D         " (z80instTest (TI [0xdd, 0x4A                  ] (LD (Reg8Reg8 C D))))
    , testCase "0xdd LD C,E         " (z80instTest (TI [0xdd, 0x4B                  ] (LD (Reg8Reg8 C E))))
    , testCase "LD C,IXh            " (z80instTest (TI [0xdd, 0x4C                  ] (LD (Reg8Reg8 C IXh))))
    , testCase "LD C,IXl            " (z80instTest (TI [0xdd, 0x4D                  ] (LD (Reg8Reg8 C IXl))))
    , testCase "LD C,(IX+N)         " (z80instTest (TI [0xDD, 0x4E, 0xbc            ] (LD (Reg8Reg8 C (IXindirect (negate 68))))))
    , testCase "0xdd LD C,A         " (z80instTest (TI [0xdd, 0x4F                  ] (LD (Reg8Reg8 C A))))
    , testCase "0xdd LD D,B         " (z80instTest (TI [0xdd, 0x50                  ] (LD (Reg8Reg8 D B))))
    , testCase "0xdd LD D,C         " (z80instTest (TI [0xdd, 0x51                  ] (LD (Reg8Reg8 D C))))
    , testCase "0xdd LD D,D         " (z80instTest (TI [0xdd, 0x52                  ] (LD (Reg8Reg8 D D))))
    , testCase "0xdd LD D,E         " (z80instTest (TI [0xdd, 0x53                  ] (LD (Reg8Reg8 D E))))
    , testCase "LD D,IXh            " (z80instTest (TI [0xdd, 0x54                  ] (LD (Reg8Reg8 D IXh))))
    , testCase "LD D,IXl            " (z80instTest (TI [0xdd, 0x55                  ] (LD (Reg8Reg8 D IXl))))
    , testCase "LD D,(IX+N)         " (z80instTest (TI [0xDD, 0x56, 0xde            ] (LD (Reg8Reg8 D (IXindirect (negate 34))))))
    , testCase "0xdd LD D,A         " (z80instTest (TI [0xdd, 0x57                  ] (LD (Reg8Reg8 D A))))
    , testCase "0xdd LD E,B         " (z80instTest (TI [0xdd, 0x58                  ] (LD (Reg8Reg8 E B))))
    , testCase "0xdd LD E,C         " (z80instTest (TI [0xdd, 0x59                  ] (LD (Reg8Reg8 E C))))
    , testCase "0xdd LD E,D         " (z80instTest (TI [0xdd, 0x5A                  ] (LD (Reg8Reg8 E D))))
    , testCase "0xdd LD E,E         " (z80instTest (TI [0xdd, 0x5B                  ] (LD (Reg8Reg8 E E))))
    , testCase "LD E,IXh            " (z80instTest (TI [0xdd, 0x5C                  ] (LD (Reg8Reg8 E IXh))))
    , testCase "LD E,IXl            " (z80instTest (TI [0xdd, 0x5D                  ] (LD (Reg8Reg8 E IXl))))
    , testCase "LD E,(IX+N)         " (z80instTest (TI [0xDD, 0x5E, 0x0f            ] (LD (Reg8Reg8 E (IXindirect 0x0f)))))
    , testCase "0xdd LD E,A         " (z80instTest (TI [0xdd, 0x5F                  ] (LD (Reg8Reg8 E A))))
    , testCase "LD IXh,B            " (z80instTest (TI [0xdd, 0x60                  ] (LD (Reg8Reg8 IXh B))))
    , testCase "LD IXh,C            " (z80instTest (TI [0xdd, 0x61                  ] (LD (Reg8Reg8 IXh C))))
    , testCase "LD IXh,D            " (z80instTest (TI [0xdd, 0x62                  ] (LD (Reg8Reg8 IXh D))))
    , testCase "LD IXh,E            " (z80instTest (TI [0xdd, 0x63                  ] (LD (Reg8Reg8 IXh E))))
    , testCase "LD IXh,IXh          " (z80instTest (TI [0xdd, 0x64                  ] (LD (Reg8Reg8 IXh IXh))))
    , testCase "LD IXh,IXl          " (z80instTest (TI [0xdd, 0x65                  ] (LD (Reg8Reg8 IXh IXl))))
    , testCase "LD IXh,(IX+N)       " (z80instTest (TI [0xDD, 0x66, 0x12            ] (LD (Reg8Reg8 IXh (IXindirect 0x12)))))
    , testCase "LD Ixh,A            " (z80instTest (TI [0xdd, 0x67                  ] (LD (Reg8Reg8 IXh A))))
    , testCase "LD IXl,B            " (z80instTest (TI [0xdd, 0x68                  ] (LD (Reg8Reg8 IXl B))))
    , testCase "LD IXl,C            " (z80instTest (TI [0xdd, 0x69                  ] (LD (Reg8Reg8 IXl C))))
    , testCase "LD IXl,D            " (z80instTest (TI [0xdd, 0x6A                  ] (LD (Reg8Reg8 IXl D))))
    , testCase "LD IXl,E            " (z80instTest (TI [0xdd, 0x6B                  ] (LD (Reg8Reg8 IXl E))))
    , testCase "LD IXl,IXh          " (z80instTest (TI [0xdd, 0x6C                  ] (LD (Reg8Reg8 IXl IXh))))
    , testCase "LD IXl,IXl          " (z80instTest (TI [0xdd, 0x6D                  ] (LD (Reg8Reg8 IXl IXl))))
    , testCase "LD IXl,(IX+N)       " (z80instTest (TI [0xDD, 0x6E, 0x34            ] (LD (Reg8Reg8 IXl (IXindirect 0x34)))))
    , testCase "LD IXl,A            " (z80instTest (TI [0xdd, 0x6F                  ] (LD (Reg8Reg8 IXl A))))
    , testCase "LD (IX+N),B         " (z80instTest (TI [0xDD, 0x70, 0x56            ] (LD (Reg8Reg8 (IXindirect 0x56) B))))
    , testCase "LD (IX+N),C         " (z80instTest (TI [0xDD, 0x71, 0x78            ] (LD (Reg8Reg8 (IXindirect 0x78) C))))
    , testCase "LD (IX+N),D         " (z80instTest (TI [0xDD, 0x72, 0x9a            ] (LD (Reg8Reg8 (IXindirect (negate 102)) D))))
    , testCase "LD (IX+N),E         " (z80instTest (TI [0xDD, 0x73, 0xbc            ] (LD (Reg8Reg8 (IXindirect (negate 68)) E))))
    , testCase "LD (IX+N),H         " (z80instTest (TI [0xDD, 0x74, 0xde            ] (LD (Reg8Reg8 (IXindirect (negate 34)) IXh))))
    , testCase "LD (IX+N),L         " (z80instTest (TI [0xDD, 0x75, 0x0f            ] (LD (Reg8Reg8 (IXindirect 0x0f) IXl))))
    , testCase "0xdd HALT           " (z80instTest (TI [0xdd, 0x76                  ] HALT))
    , testCase "LD (IX+N),A         " (z80instTest (TI [0xDD, 0x77, 0x12            ] (LD (Reg8Reg8 (IXindirect 0x12) A))))
    , testCase "0xdd LD A,B         " (z80instTest (TI [0xdd, 0x78                  ] (LD (Reg8Reg8 A B))))
    , testCase "0xdd LD A,C         " (z80instTest (TI [0xdd, 0x79                  ] (LD (Reg8Reg8 A C))))
    , testCase "0xdd LD A,D         " (z80instTest (TI [0xdd, 0x7A                  ] (LD (Reg8Reg8 A D))))
    , testCase "0xdd LD A,E         " (z80instTest (TI [0xdd, 0x7B                  ] (LD (Reg8Reg8 A E))))
    , testCase "LD A,IXh            " (z80instTest (TI [0xdd, 0x7C                  ] (LD (Reg8Reg8 A IXh))))
    , testCase "LD A,IXl            " (z80instTest (TI [0xdd, 0x7D                  ] (LD (Reg8Reg8 A IXl))))
    , testCase "LD A,(IX+N)         " (z80instTest (TI [0xDD, 0x7E, 0x34            ] (LD (Reg8Reg8 A (IXindirect 0x34)))))
    , testCase "0xdd LD A,A         " (z80instTest (TI [0xdd, 0x7F                  ] (LD (Reg8Reg8 A A))))
    , testCase "0xdd ADD A,B        " (z80instTest (TI [0xdd, 0x80                  ] (ADD8 (ALUAcc (ALUreg8 B)))))
    , testCase "0xdd ADD A,C        " (z80instTest (TI [0xdd, 0x81                  ] (ADD8 (ALUAcc (ALUreg8 C)))))
    , testCase "0xdd ADD A,D        " (z80instTest (TI [0xdd, 0x82                  ] (ADD8 (ALUAcc (ALUreg8 D)))))
    , testCase "0xdd ADD A,E        " (z80instTest (TI [0xdd, 0x83                  ] (ADD8 (ALUAcc (ALUreg8 E)))))
    , testCase "ADD A,IXh           " (z80instTest (TI [0xdd, 0x84                  ] (ADD8 (ALUAcc (ALUreg8 IXh)))))
    , testCase "ADD A,IXl           " (z80instTest (TI [0xdd, 0x85                  ] (ADD8 (ALUAcc (ALUreg8 IXl)))))
    , testCase "ADD A,(IX+N)        " (z80instTest (TI [0xDD, 0x86, 0x56            ] (ADD8 (ALUAcc (ALUreg8 (IXindirect 0x56))))))
    , testCase "0xdd ADD A,A        " (z80instTest (TI [0xdd, 0x87                  ] (ADD8 (ALUAcc (ALUreg8 A)))))
    , testCase "0xdd ADC A,B        " (z80instTest (TI [0xdd, 0x88                  ] (ADC8 (ALUAcc (ALUreg8 B)))))
    , testCase "0xdd ADC A,C        " (z80instTest (TI [0xdd, 0x89                  ] (ADC8 (ALUAcc (ALUreg8 C)))))
    , testCase "0xdd ADC A,D        " (z80instTest (TI [0xdd, 0x8A                  ] (ADC8 (ALUAcc (ALUreg8 D)))))
    , testCase "0xdd ADC A,E        " (z80instTest (TI [0xdd, 0x8B                  ] (ADC8 (ALUAcc (ALUreg8 E)))))
    , testCase "0xdd ADC A,IXh      " (z80instTest (TI [0xdd, 0x8C                  ] (ADC8 (ALUAcc (ALUreg8 IXh)))))
    , testCase "0xdd ADC A,IXl      " (z80instTest (TI [0xdd, 0x8D                  ] (ADC8 (ALUAcc (ALUreg8 IXl)))))
    , testCase "ADC A,(IX+N)        " (z80instTest (TI [0xDD, 0x8E, 0x78            ] (ADC8 (ALUAcc (ALUreg8 (IXindirect 0x78))))))
    , testCase "0xdd ADC A,A        " (z80instTest (TI [0xdd, 0x8F                  ] (ADC8 (ALUAcc (ALUreg8 A)))))
    , testCase "0xdd SUB B          " (z80instTest (TI [0xdd, 0x90                  ] (SUB (ALUreg8 B))))
    , testCase "0xdd SUB C          " (z80instTest (TI [0xdd, 0x91                  ] (SUB (ALUreg8 C))))
    , testCase "0xdd SUB D          " (z80instTest (TI [0xdd, 0x92                  ] (SUB (ALUreg8 D))))
    , testCase "0xdd SUB E          " (z80instTest (TI [0xdd, 0x93                  ] (SUB (ALUreg8 E))))
    , testCase "0xdd SUB IXh        " (z80instTest (TI [0xdd, 0x94                  ] (SUB (ALUreg8 IXh))))
    , testCase "0xdd SUB IXl        " (z80instTest (TI [0xdd, 0x95                  ] (SUB (ALUreg8 IXl))))
    , testCase "SUB (IX+N)          " (z80instTest (TI [0xDD, 0x96, 0x9a            ] (SUB (ALUreg8 (IXindirect (negate 102))))))
    , testCase "0xdd SUB A          " (z80instTest (TI [0xdd, 0x97                  ] (SUB (ALUreg8 A))))
    , testCase "0xdd SBC B          " (z80instTest (TI [0xdd, 0x98                  ] (SBC8 (ALUAcc (ALUreg8 B)))))
    , testCase "0xdd SBC C          " (z80instTest (TI [0xdd, 0x99                  ] (SBC8 (ALUAcc (ALUreg8 C)))))
    , testCase "0xdd SBC D          " (z80instTest (TI [0xdd, 0x9A                  ] (SBC8 (ALUAcc (ALUreg8 D)))))
    , testCase "0xdd SBC E          " (z80instTest (TI [0xdd, 0x9B                  ] (SBC8 (ALUAcc (ALUreg8 E)))))
    , testCase "0xdd SBC IXh        " (z80instTest (TI [0xdd, 0x9C                  ] (SBC8 (ALUAcc (ALUreg8 IXh)))))
    , testCase "0xdd SBC IXl        " (z80instTest (TI [0xdd, 0x9D                  ] (SBC8 (ALUAcc (ALUreg8 IXl)))))
    , testCase "SBC A,(IX+N)        " (z80instTest (TI [0xDD, 0x9E, 0xbc            ] (SBC8 (ALUAcc (ALUreg8 (IXindirect(negate 68)))))))
    , testCase "0xdd SBC A          " (z80instTest (TI [0xdd, 0x9F                  ] (SBC8 (ALUAcc (ALUreg8 A)))))
    , testCase "0xdd AND B          " (z80instTest (TI [0xdd, 0xA0                  ] (AND (ALUreg8 B))))
    , testCase "0xdd AND C          " (z80instTest (TI [0xdd, 0xA1                  ] (AND (ALUreg8 C))))
    , testCase "0xdd AND D          " (z80instTest (TI [0xdd, 0xA2                  ] (AND (ALUreg8 D))))
    , testCase "0xdd AND E          " (z80instTest (TI [0xdd, 0xA3                  ] (AND (ALUreg8 E))))
    , testCase "0xdd AND IXh        " (z80instTest (TI [0xdd, 0xA4                  ] (AND (ALUreg8 IXh))))
    , testCase "0xdd AND IXh        " (z80instTest (TI [0xdd, 0xA5                  ] (AND (ALUreg8 IXl))))
    , testCase "AND (IX+N)          " (z80instTest (TI [0xDD, 0xA6, 0xde            ] (AND (ALUreg8 (IXindirect (negate 34))))))
    , testCase "0xdd AND A          " (z80instTest (TI [0xdd, 0xA7                  ] (AND (ALUreg8 A))))
    , testCase "0xdd XOR B          " (z80instTest (TI [0xdd, 0xA8                  ] (XOR (ALUreg8 B))))
    , testCase "0xdd XOR C          " (z80instTest (TI [0xdd, 0xA9                  ] (XOR (ALUreg8 C))))
    , testCase "0xdd XOR D          " (z80instTest (TI [0xdd, 0xAA                  ] (XOR (ALUreg8 D))))
    , testCase "0xdd XOR E          " (z80instTest (TI [0xdd, 0xAB                  ] (XOR (ALUreg8 E))))
    , testCase "0xdd XOR IXh        " (z80instTest (TI [0xdd, 0xAC                  ] (XOR (ALUreg8 IXh))))
    , testCase "0xdd XOR IXl        " (z80instTest (TI [0xdd, 0xAD                  ] (XOR (ALUreg8 IXl))))
    , testCase "XOR (IX+N)          " (z80instTest (TI [0xDD, 0xAE, 0x0f            ] (XOR (ALUreg8 (IXindirect 0x0f)))))
    , testCase "0xdd XOR A          " (z80instTest (TI [0xdd, 0xAF                  ] (XOR (ALUreg8 A))))
    , testCase "0xdd OR B           " (z80instTest (TI [0xdd, 0xB0                  ] (OR (ALUreg8 B))))
    , testCase "0xdd OR C           " (z80instTest (TI [0xdd, 0xB1                  ] (OR (ALUreg8 C))))
    , testCase "0xdd OR D           " (z80instTest (TI [0xdd, 0xB2                  ] (OR (ALUreg8 D))))
    , testCase "0xdd OR E           " (z80instTest (TI [0xdd, 0xB3                  ] (OR (ALUreg8 E))))
    , testCase "0xdd OR IXh         " (z80instTest (TI [0xdd, 0xB4                  ] (OR (ALUreg8 IXh))))
    , testCase "0xdd OR IXh         " (z80instTest (TI [0xdd, 0xB5                  ] (OR (ALUreg8 IXl))))
    , testCase "OR (IX+N)           " (z80instTest (TI [0xDD, 0xB6, 0x12            ] (OR (ALUreg8 (IXindirect 0x12)))))
    , testCase "0xdd OR A           " (z80instTest (TI [0xdd, 0xB7                  ] (OR (ALUreg8 A))))
    , testCase "0xdd CP B           " (z80instTest (TI [0xdd, 0xB8                  ] (CP (ALUreg8 B))))
    , testCase "0xdd CP C           " (z80instTest (TI [0xdd, 0xB9                  ] (CP (ALUreg8 C))))
    , testCase "0xdd CP D           " (z80instTest (TI [0xdd, 0xBA                  ] (CP (ALUreg8 D))))
    , testCase "0xdd CP E           " (z80instTest (TI [0xdd, 0xBB                  ] (CP (ALUreg8 E))))
    , testCase "0xdd CP IXh         " (z80instTest (TI [0xdd, 0xBC                  ] (CP (ALUreg8 IXh))))
    , testCase "0xdd CP IXl         " (z80instTest (TI [0xdd, 0xBD                  ] (CP (ALUreg8 IXl))))
    , testCase "CP (IX+N)           " (z80instTest (TI [0xDD, 0xBE, 0x34            ] (CP (ALUreg8 (IXindirect 0x34)))))
    , testCase "0xdd CP A           " (z80instTest (TI [0xdd, 0xBF                  ] (CP (ALUreg8 A))))
    , testCase "0xdd RET NZ         " (z80instTest (TI [0xdd, 0xC0                  ] (RETCC NZ)))
    , testCase "0xdd POP BC         " (z80instTest (TI [0xdd, 0xC1                  ] (POP (AFPair16 BC))))
    , testCase "0xdd JP NZ,$+3      " (z80instTest (TI [0xdd, 0xC2, 0x78, 0x56      ] (JPCC NZ (AbsAddr 0x5678))))
    , testCase "0xdd JP $+3         " (z80instTest (TI [0xdd, 0xC3, 0x34, 0x12      ] (JP (AbsAddr 0x1234))))
    , testCase "0xdd CALL NZ,NN     " (z80instTest (TI [0xdd, 0xC4, 0x56, 0x78      ] (CALLCC NZ (AbsAddr 0x7856))))
    , testCase "0xdd PUSH BC        " (z80instTest (TI [0xdd, 0xC5                  ] (PUSH (AFPair16 BC))))
    , testCase "0xdd ADD A,N        " (z80instTest (TI [0xdd, 0xC6, 0x9a            ] (ADD8 (ALUAcc (ALUimm 0x9a)))))
    , testCase "0xdd RST 0          " (z80instTest (TI [0xdd, 0xC7                  ] (RST 0)))
    , testCase "0xdd RET Z          " (z80instTest (TI [0xdd, 0xC8                  ] (RETCC Z)))
    , testCase "0xdd RET            " (z80instTest (TI [0xdd, 0xC9                  ] RET))
    , testCase "0xdd JP Z,$+3       " (z80instTest (TI [0xdd, 0xCA, 0xbb, 0xaa      ] (JPCC Z (AbsAddr 0xaabb))))
    , testCase "RLC (IX+d)->B       " (z80instTest (TI [0xdd, 0xCB, 0x10, 0x00      ] (RLCidx (IXindirect 0x10) B)))
    , testCase "RLC (IX+d)->C       " (z80instTest (TI [0xdd, 0xCB, 0x11, 0x01      ] (RLCidx (IXindirect 0x11) C)))
    , testCase "RLC (IX+d)->D       " (z80instTest (TI [0xdd, 0xCB, 0x12, 0x02      ] (RLCidx (IXindirect 0x12) D)))
    , testCase "RLC (IX+d)->E       " (z80instTest (TI [0xdd, 0xCB, 0x13, 0x03      ] (RLCidx (IXindirect 0x13) E)))
    , testCase "RLC (IX+d)->H       " (z80instTest (TI [0xdd, 0xCB, 0x14, 0x04      ] (RLCidx (IXindirect 0x14) H)))
    , testCase "RLC (IX+d)->L       " (z80instTest (TI [0xdd, 0xCB, 0x15, 0x05      ] (RLCidx (IXindirect 0x15) L)))
    , testCase "RLC (IX+d)          " (z80instTest (TI [0xdd, 0xCB, 0x16, 0x06      ] (RLC (IXindirect 0x16))))
    , testCase "RLC (IX+d)->A       " (z80instTest (TI [0xdd, 0xCB, 0x17, 0x07      ] (RLCidx (IXindirect 0x17) A)))
    , testCase "RRC (IX+d)->B       " (z80instTest (TI [0xdd, 0xCB, 0x10, 0x08      ] (RRCidx (IXindirect 0x10) B)))
    , testCase "RRC (IX+d)->C       " (z80instTest (TI [0xdd, 0xCB, 0x11, 0x09      ] (RRCidx (IXindirect 0x11) C)))
    , testCase "RRC (IX+d)->D       " (z80instTest (TI [0xdd, 0xCB, 0x12, 0x0a      ] (RRCidx (IXindirect 0x12) D)))
    , testCase "RRC (IX+d)->E       " (z80instTest (TI [0xdd, 0xCB, 0x13, 0x0b      ] (RRCidx (IXindirect 0x13) E)))
    , testCase "RRC (IX+d)->H       " (z80instTest (TI [0xdd, 0xCB, 0x14, 0x0c      ] (RRCidx (IXindirect 0x14) H)))
    , testCase "RRC (IX+d)->L       " (z80instTest (TI [0xdd, 0xCB, 0x15, 0x0d      ] (RRCidx (IXindirect 0x15) L)))
    , testCase "RRC (IX+d)          " (z80instTest (TI [0xdd, 0xCB, 0x16, 0x0e      ] (RRC (IXindirect 0x16))))
    , testCase "RRC (IX+d)->A       " (z80instTest (TI [0xdd, 0xCB, 0x17, 0x0f      ] (RRCidx (IXindirect 0x17) A)))
    , testCase "RL (IX+d)->B        " (z80instTest (TI [0xdd, 0xCB, 0x10, 0x10      ] (RLidx (IXindirect 0x10) B)))
    , testCase "RL (IX+d)->C        " (z80instTest (TI [0xdd, 0xCB, 0x11, 0x11      ] (RLidx (IXindirect 0x11) C)))
    , testCase "RL (IX+d)->D        " (z80instTest (TI [0xdd, 0xCB, 0x12, 0x12      ] (RLidx (IXindirect 0x12) D)))
    , testCase "RL (IX+d)->E        " (z80instTest (TI [0xdd, 0xCB, 0x13, 0x13      ] (RLidx (IXindirect 0x13) E)))
    , testCase "RL (IX+d)->H        " (z80instTest (TI [0xdd, 0xCB, 0x14, 0x14      ] (RLidx (IXindirect 0x14) H)))
    , testCase "RL (IX+d)->L        " (z80instTest (TI [0xdd, 0xCB, 0x15, 0x15      ] (RLidx (IXindirect 0x15) L)))
    , testCase "RL (IX+d)           " (z80instTest (TI [0xdd, 0xCB, 0x16, 0x16      ] (RL (IXindirect 0x16))))
    , testCase "RL (IX+d)->A        " (z80instTest (TI [0xdd, 0xCB, 0x17, 0x17      ] (RLidx (IXindirect 0x17) A)))
    , testCase "RR (IX+d)->B        " (z80instTest (TI [0xdd, 0xCB, 0x10, 0x18      ] (RRidx (IXindirect 0x10) B)))
    , testCase "RR (IX+d)->C        " (z80instTest (TI [0xdd, 0xCB, 0x11, 0x19      ] (RRidx (IXindirect 0x11) C)))
    , testCase "RR (IX+d)->D        " (z80instTest (TI [0xdd, 0xCB, 0x12, 0x1a      ] (RRidx (IXindirect 0x12) D)))
    , testCase "RR (IX+d)->E        " (z80instTest (TI [0xdd, 0xCB, 0x13, 0x1b      ] (RRidx (IXindirect 0x13) E)))
    , testCase "RR (IX+d)->H        " (z80instTest (TI [0xdd, 0xCB, 0x14, 0x1c      ] (RRidx (IXindirect 0x14) H)))
    , testCase "RR (IX+d)->L        " (z80instTest (TI [0xdd, 0xCB, 0x15, 0x1d      ] (RRidx (IXindirect 0x15) L)))
    , testCase "RR (IX+d)           " (z80instTest (TI [0xdd, 0xCB, 0x16, 0x1e      ] (RR (IXindirect 0x16))))
    , testCase "RR (IX+d)->A        " (z80instTest (TI [0xdd, 0xCB, 0x17, 0x1f      ] (RRidx (IXindirect 0x17) A)))
    , testCase "SLA (IX+d)->B       " (z80instTest (TI [0xdd, 0xCB, 0x10, 0x20      ] (SLAidx (IXindirect 0x10) B)))
    , testCase "SLA (IX+d)->C       " (z80instTest (TI [0xdd, 0xCB, 0x11, 0x21      ] (SLAidx (IXindirect 0x11) C)))
    , testCase "SLA (IX+d)->D       " (z80instTest (TI [0xdd, 0xCB, 0x12, 0x22      ] (SLAidx (IXindirect 0x12) D)))
    , testCase "SLA (IX+d)->E       " (z80instTest (TI [0xdd, 0xCB, 0x13, 0x23      ] (SLAidx (IXindirect 0x13) E)))
    , testCase "SLA (IX+d)->H       " (z80instTest (TI [0xdd, 0xCB, 0x14, 0x24      ] (SLAidx (IXindirect 0x14) H)))
    , testCase "SLA (IX+d)->L       " (z80instTest (TI [0xdd, 0xCB, 0x15, 0x25      ] (SLAidx (IXindirect 0x15) L)))
    , testCase "SLA (IX+d)          " (z80instTest (TI [0xdd, 0xCB, 0x16, 0x26      ] (SLA (IXindirect 0x16))))
    , testCase "SLA (IX+d)->A       " (z80instTest (TI [0xdd, 0xCB, 0x17, 0x27      ] (SLAidx (IXindirect 0x17) A)))
    , testCase "SRA (IX+d)->B       " (z80instTest (TI [0xdd, 0xCB, 0x10, 0x28      ] (SRAidx (IXindirect 0x10) B)))
    , testCase "SRA (IX+d)->C       " (z80instTest (TI [0xdd, 0xCB, 0x11, 0x29      ] (SRAidx (IXindirect 0x11) C)))
    , testCase "SRA (IX+d)->D       " (z80instTest (TI [0xdd, 0xCB, 0x12, 0x2a      ] (SRAidx (IXindirect 0x12) D)))
    , testCase "SRA (IX+d)->E       " (z80instTest (TI [0xdd, 0xCB, 0x13, 0x2b      ] (SRAidx (IXindirect 0x13) E)))
    , testCase "SRA (IX+d)->H       " (z80instTest (TI [0xdd, 0xCB, 0x14, 0x2c      ] (SRAidx (IXindirect 0x14) H)))
    , testCase "SRA (IX+d)->L       " (z80instTest (TI [0xdd, 0xCB, 0x15, 0x2d      ] (SRAidx (IXindirect 0x15) L)))
    , testCase "SRA (IX+d)          " (z80instTest (TI [0xdd, 0xCB, 0x16, 0x2e      ] (SRA (IXindirect 0x16))))
    , testCase "SRA (IX+d)->A       " (z80instTest (TI [0xdd, 0xCB, 0x17, 0x2f      ] (SRAidx (IXindirect 0x17) A)))
    , testCase "SLL (IX+d)->B       " (z80instTest (TI [0xdd, 0xCB, 0x10, 0x30      ] (SLLidx (IXindirect 0x10) B)))
    , testCase "SLL (IX+d)->C       " (z80instTest (TI [0xdd, 0xCB, 0x11, 0x31      ] (SLLidx (IXindirect 0x11) C)))
    , testCase "SLL (IX+d)->D       " (z80instTest (TI [0xdd, 0xCB, 0x12, 0x32      ] (SLLidx (IXindirect 0x12) D)))
    , testCase "SLL (IX+d)->E       " (z80instTest (TI [0xdd, 0xCB, 0x13, 0x33      ] (SLLidx (IXindirect 0x13) E)))
    , testCase "SLL (IX+d)->H       " (z80instTest (TI [0xdd, 0xCB, 0x14, 0x34      ] (SLLidx (IXindirect 0x14) H)))
    , testCase "SLL (IX+d)->L       " (z80instTest (TI [0xdd, 0xCB, 0x15, 0x35      ] (SLLidx (IXindirect 0x15) L)))
    , testCase "SLL (IX+d)          " (z80instTest (TI [0xdd, 0xCB, 0x16, 0x36      ] (SLL (IXindirect 0x16))))
    , testCase "SLL (IX+d)->A       " (z80instTest (TI [0xdd, 0xCB, 0x17, 0x37      ] (SLLidx (IXindirect 0x17) A)))
    , testCase "SRL (IX+d)->B       " (z80instTest (TI [0xdd, 0xCB, 0x10, 0x38      ] (SRLidx (IXindirect 0x10) B)))
    , testCase "SRL (IX+d)->C       " (z80instTest (TI [0xdd, 0xCB, 0x11, 0x39      ] (SRLidx (IXindirect 0x11) C)))
    , testCase "SRL (IX+d)->D       " (z80instTest (TI [0xdd, 0xCB, 0x12, 0x3a      ] (SRLidx (IXindirect 0x12) D)))
    , testCase "SRL (IX+d)->E       " (z80instTest (TI [0xdd, 0xCB, 0x13, 0x3b      ] (SRLidx (IXindirect 0x13) E)))
    , testCase "SRL (IX+d)->H       " (z80instTest (TI [0xdd, 0xCB, 0x14, 0x3c      ] (SRLidx (IXindirect 0x14) H)))
    , testCase "SRL (IX+d)->L       " (z80instTest (TI [0xdd, 0xCB, 0x15, 0x3d      ] (SRLidx (IXindirect 0x15) L)))
    , testCase "SRL (IX+d)          " (z80instTest (TI [0xdd, 0xCB, 0x16, 0x3e      ] (SRL (IXindirect 0x16))))
    , testCase "SRL (IX+d)->A       " (z80instTest (TI [0xdd, 0xCB, 0x17, 0x3f      ] (SRLidx (IXindirect 0x17) A)))
    , testCase "BIT 0,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x20, 0x40      ] (BIT 0 (IXindirect 0x20))))
    , testCase "BIT 0,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x21, 0x41      ] (BIT 0 (IXindirect 0x21))))
    , testCase "BIT 0,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x22, 0x42      ] (BIT 0 (IXindirect 0x22))))
    , testCase "BIT 0,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x23, 0x43      ] (BIT 0 (IXindirect 0x23))))
    , testCase "BIT 0,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x24, 0x44      ] (BIT 0 (IXindirect 0x24))))
    , testCase "BIT 0,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x25, 0x45      ] (BIT 0 (IXindirect 0x25))))
    , testCase "BIT 0,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x26, 0x46      ] (BIT 0 (IXindirect 0x26))))
    , testCase "BIT 0,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x27, 0x47      ] (BIT 0 (IXindirect 0x27))))
    , testCase "BIT 1,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x28, 0x48      ] (BIT 1 (IXindirect 0x28))))
    , testCase "BIT 1,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x29, 0x49      ] (BIT 1 (IXindirect 0x29))))
    , testCase "BIT 1,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2a, 0x4a      ] (BIT 1 (IXindirect 0x2a))))
    , testCase "BIT 1,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2b, 0x4b      ] (BIT 1 (IXindirect 0x2b))))
    , testCase "BIT 1,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2c, 0x4c      ] (BIT 1 (IXindirect 0x2c))))
    , testCase "BIT 1,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2d, 0x4d      ] (BIT 1 (IXindirect 0x2d))))
    , testCase "BIT 1,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2e, 0x4e      ] (BIT 1 (IXindirect 0x2e))))
    , testCase "BIT 1,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2f, 0x4f      ] (BIT 1 (IXindirect 0x2f))))
    , testCase "BIT 2,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x20, 0x50      ] (BIT 2 (IXindirect 0x20))))
    , testCase "BIT 2,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x21, 0x51      ] (BIT 2 (IXindirect 0x21))))
    , testCase "BIT 2,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x22, 0x52      ] (BIT 2 (IXindirect 0x22))))
    , testCase "BIT 2,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x23, 0x53      ] (BIT 2 (IXindirect 0x23))))
    , testCase "BIT 2,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x24, 0x54      ] (BIT 2 (IXindirect 0x24))))
    , testCase "BIT 2,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x25, 0x55      ] (BIT 2 (IXindirect 0x25))))
    , testCase "BIT 2,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x26, 0x56      ] (BIT 2 (IXindirect 0x26))))
    , testCase "BIT 2,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x27, 0x57      ] (BIT 2 (IXindirect 0x27))))
    , testCase "BIT 3,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x28, 0x58      ] (BIT 3 (IXindirect 0x28))))
    , testCase "BIT 3,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x29, 0x59      ] (BIT 3 (IXindirect 0x29))))
    , testCase "BIT 3,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2a, 0x5a      ] (BIT 3 (IXindirect 0x2a))))
    , testCase "BIT 3,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2b, 0x5b      ] (BIT 3 (IXindirect 0x2b))))
    , testCase "BIT 3,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2c, 0x5c      ] (BIT 3 (IXindirect 0x2c))))
    , testCase "BIT 3,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2d, 0x5d      ] (BIT 3 (IXindirect 0x2d))))
    , testCase "BIT 3,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2e, 0x5e      ] (BIT 3 (IXindirect 0x2e))))
    , testCase "BIT 3,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2f, 0x5f      ] (BIT 3 (IXindirect 0x2f))))
    , testCase "BIT 4,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x20, 0x60      ] (BIT 4 (IXindirect 0x20))))
    , testCase "BIT 4,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x21, 0x61      ] (BIT 4 (IXindirect 0x21))))
    , testCase "BIT 4,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x22, 0x62      ] (BIT 4 (IXindirect 0x22))))
    , testCase "BIT 4,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x23, 0x63      ] (BIT 4 (IXindirect 0x23))))
    , testCase "BIT 4,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x24, 0x64      ] (BIT 4 (IXindirect 0x24))))
    , testCase "BIT 4,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x25, 0x65      ] (BIT 4 (IXindirect 0x25))))
    , testCase "BIT 4,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x26, 0x66      ] (BIT 4 (IXindirect 0x26))))
    , testCase "BIT 4,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x27, 0x67      ] (BIT 4 (IXindirect 0x27))))
    , testCase "BIT 5,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x28, 0x68      ] (BIT 5 (IXindirect 0x28))))
    , testCase "BIT 5,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x29, 0x69      ] (BIT 5 (IXindirect 0x29))))
    , testCase "BIT 5,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2a, 0x6a      ] (BIT 5 (IXindirect 0x2a))))
    , testCase "BIT 5,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2b, 0x6b      ] (BIT 5 (IXindirect 0x2b))))
    , testCase "BIT 5,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2c, 0x6c      ] (BIT 5 (IXindirect 0x2c))))
    , testCase "BIT 5,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2d, 0x6d      ] (BIT 5 (IXindirect 0x2d))))
    , testCase "BIT 5,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2e, 0x6e      ] (BIT 5 (IXindirect 0x2e))))
    , testCase "BIT 5,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2f, 0x6f      ] (BIT 5 (IXindirect 0x2f))))
    , testCase "BIT 6,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x20, 0x70      ] (BIT 6 (IXindirect 0x20))))
    , testCase "BIT 6,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x21, 0x71      ] (BIT 6 (IXindirect 0x21))))
    , testCase "BIT 6,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x22, 0x72      ] (BIT 6 (IXindirect 0x22))))
    , testCase "BIT 6,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x23, 0x73      ] (BIT 6 (IXindirect 0x23))))
    , testCase "BIT 6,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x24, 0x74      ] (BIT 6 (IXindirect 0x24))))
    , testCase "BIT 6,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x25, 0x75      ] (BIT 6 (IXindirect 0x25))))
    , testCase "BIT 6,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x26, 0x76      ] (BIT 6 (IXindirect 0x26))))
    , testCase "BIT 6,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x27, 0x77      ] (BIT 6 (IXindirect 0x27))))
    , testCase "BIT 7,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x28, 0x78      ] (BIT 7 (IXindirect 0x28))))
    , testCase "BIT 7,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x29, 0x79      ] (BIT 7 (IXindirect 0x29))))
    , testCase "BIT 7,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2a, 0x7a      ] (BIT 7 (IXindirect 0x2a))))
    , testCase "BIT 7,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2b, 0x7b      ] (BIT 7 (IXindirect 0x2b))))
    , testCase "BIT 7,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2c, 0x7c      ] (BIT 7 (IXindirect 0x2c))))
    , testCase "BIT 7,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2d, 0x7d      ] (BIT 7 (IXindirect 0x2d))))
    , testCase "BIT 7,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2e, 0x7e      ] (BIT 7 (IXindirect 0x2e))))
    , testCase "BIT 7,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x2f, 0x7f      ] (BIT 7 (IXindirect 0x2f))))
    , testCase "RES 0,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0x80      ] (RESidx 0 (IXindirect 0x10) B)))
    , testCase "RES 0,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0x81      ] (RESidx 0 (IXindirect 0x11) C)))
    , testCase "RES 0,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0x82      ] (RESidx 0 (IXindirect 0x12) D)))
    , testCase "RES 0,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0x83      ] (RESidx 0 (IXindirect 0x13) E)))
    , testCase "RES 0,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0x84      ] (RESidx 0 (IXindirect 0x14) H)))
    , testCase "RES 0,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0x85      ] (RESidx 0 (IXindirect 0x15) L)))
    , testCase "RES 0,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0x86      ] (RES 0 (IXindirect 0x16))))
    , testCase "RES 0,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0x87      ] (RESidx 0 (IXindirect 0x17) A)))
    , testCase "RES 1,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0x88      ] (RESidx 1 (IXindirect 0x10) B)))
    , testCase "RES 1,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0x89      ] (RESidx 1 (IXindirect 0x11) C)))
    , testCase "RES 1,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0x8a      ] (RESidx 1 (IXindirect 0x12) D)))
    , testCase "RES 1,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0x8b      ] (RESidx 1 (IXindirect 0x13) E)))
    , testCase "RES 1,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0x8c      ] (RESidx 1 (IXindirect 0x14) H)))
    , testCase "RES 1,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0x8d      ] (RESidx 1 (IXindirect 0x15) L)))
    , testCase "RES 1,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0x8e      ] (RES 1 (IXindirect 0x16))))
    , testCase "RES 1,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0x8f      ] (RESidx 1 (IXindirect 0x17) A)))
    , testCase "RES 2,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0x90      ] (RESidx 2 (IXindirect 0x10) B)))
    , testCase "RES 2,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0x91      ] (RESidx 2 (IXindirect 0x11) C)))
    , testCase "RES 2,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0x92      ] (RESidx 2 (IXindirect 0x12) D)))
    , testCase "RES 2,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0x93      ] (RESidx 2 (IXindirect 0x13) E)))
    , testCase "RES 2,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0x94      ] (RESidx 2 (IXindirect 0x14) H)))
    , testCase "RES 2,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0x95      ] (RESidx 2 (IXindirect 0x15) L)))
    , testCase "RES 2,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0x96      ] (RES 2 (IXindirect 0x16))))
    , testCase "RES 2,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0x97      ] (RESidx 2 (IXindirect 0x17) A)))
    , testCase "RES 3,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0x98      ] (RESidx 3 (IXindirect 0x10) B)))
    , testCase "RES 3,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0x99      ] (RESidx 3 (IXindirect 0x11) C)))
    , testCase "RES 3,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0x9a      ] (RESidx 3 (IXindirect 0x12) D)))
    , testCase "RES 3,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0x9b      ] (RESidx 3 (IXindirect 0x13) E)))
    , testCase "RES 3,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0x9c      ] (RESidx 3 (IXindirect 0x14) H)))
    , testCase "RES 3,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0x9d      ] (RESidx 3 (IXindirect 0x15) L)))
    , testCase "RES 3,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0x9e      ] (RES 3 (IXindirect 0x16))))
    , testCase "RES 3,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0x9f      ] (RESidx 3 (IXindirect 0x17) A)))
    , testCase "RES 4,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0xa0      ] (RESidx 4 (IXindirect 0x10) B)))
    , testCase "RES 4,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0xa1      ] (RESidx 4 (IXindirect 0x11) C)))
    , testCase "RES 4,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0xa2      ] (RESidx 4 (IXindirect 0x12) D)))
    , testCase "RES 4,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0xa3      ] (RESidx 4 (IXindirect 0x13) E)))
    , testCase "RES 4,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0xa4      ] (RESidx 4 (IXindirect 0x14) H)))
    , testCase "RES 4,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0xa5      ] (RESidx 4 (IXindirect 0x15) L)))
    , testCase "RES 4,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0xa6      ] (RES 4 (IXindirect 0x16))))
    , testCase "RES 4,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0xa7      ] (RESidx 4 (IXindirect 0x17) A)))
    , testCase "RES 5,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0xa8      ] (RESidx 5 (IXindirect 0x10) B)))
    , testCase "RES 5,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0xa9      ] (RESidx 5 (IXindirect 0x11) C)))
    , testCase "RES 5,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0xaa      ] (RESidx 5 (IXindirect 0x12) D)))
    , testCase "RES 5,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0xab      ] (RESidx 5 (IXindirect 0x13) E)))
    , testCase "RES 5,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0xac      ] (RESidx 5 (IXindirect 0x14) H)))
    , testCase "RES 5,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0xad      ] (RESidx 5 (IXindirect 0x15) L)))
    , testCase "RES 5,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0xae      ] (RES 5 (IXindirect 0x16))))
    , testCase "RES 5,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0xaf      ] (RESidx 5 (IXindirect 0x17) A)))
    , testCase "RES 6,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0xb0      ] (RESidx 6 (IXindirect 0x10) B)))
    , testCase "RES 6,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0xb1      ] (RESidx 6 (IXindirect 0x11) C)))
    , testCase "RES 6,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0xb2      ] (RESidx 6 (IXindirect 0x12) D)))
    , testCase "RES 6,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0xb3      ] (RESidx 6 (IXindirect 0x13) E)))
    , testCase "RES 6,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0xb4      ] (RESidx 6 (IXindirect 0x14) H)))
    , testCase "RES 6,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0xb5      ] (RESidx 6 (IXindirect 0x15) L)))
    , testCase "RES 6,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0xb6      ] (RES 6 (IXindirect 0x16))))
    , testCase "RES 6,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0xb7      ] (RESidx 6 (IXindirect 0x17) A)))
    , testCase "RES 7,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0xb8      ] (RESidx 7 (IXindirect 0x10) B)))
    , testCase "RES 7,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0xb9      ] (RESidx 7 (IXindirect 0x11) C)))
    , testCase "RES 7,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0xba      ] (RESidx 7 (IXindirect 0x12) D)))
    , testCase "RES 7,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0xbb      ] (RESidx 7 (IXindirect 0x13) E)))
    , testCase "RES 7,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0xbc      ] (RESidx 7 (IXindirect 0x14) H)))
    , testCase "RES 7,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0xbd      ] (RESidx 7 (IXindirect 0x15) L)))
    , testCase "RES 7,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0xbe      ] (RES 7 (IXindirect 0x16))))
    , testCase "RES 7,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0xbf      ] (RESidx 7 (IXindirect 0x17) A)))
    , testCase "SET 0,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0xc0      ] (SETidx 0 (IXindirect 0x10) B)))
    , testCase "SET 0,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0xc1      ] (SETidx 0 (IXindirect 0x11) C)))
    , testCase "SET 0,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0xc2      ] (SETidx 0 (IXindirect 0x12) D)))
    , testCase "SET 0,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0xc3      ] (SETidx 0 (IXindirect 0x13) E)))
    , testCase "SET 0,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0xc4      ] (SETidx 0 (IXindirect 0x14) H)))
    , testCase "SET 0,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0xc5      ] (SETidx 0 (IXindirect 0x15) L)))
    , testCase "SET 0,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0xc6      ] (SET 0 (IXindirect 0x16))))
    , testCase "SET 0,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0xc7      ] (SETidx 0 (IXindirect 0x17) A)))
    , testCase "SET 1,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0xc8      ] (SETidx 1 (IXindirect 0x10) B)))
    , testCase "SET 1,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0xc9      ] (SETidx 1 (IXindirect 0x11) C)))
    , testCase "SET 1,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0xca      ] (SETidx 1 (IXindirect 0x12) D)))
    , testCase "SET 1,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0xcb      ] (SETidx 1 (IXindirect 0x13) E)))
    , testCase "SET 1,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0xcc      ] (SETidx 1 (IXindirect 0x14) H)))
    , testCase "SET 1,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0xcd      ] (SETidx 1 (IXindirect 0x15) L)))
    , testCase "SET 1,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0xce      ] (SET 1 (IXindirect 0x16))))
    , testCase "SET 1,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0xcf      ] (SETidx 1 (IXindirect 0x17) A)))
    , testCase "SET 2,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0xd0      ] (SETidx 2 (IXindirect 0x10) B)))
    , testCase "SET 2,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0xd1      ] (SETidx 2 (IXindirect 0x11) C)))
    , testCase "SET 2,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0xd2      ] (SETidx 2 (IXindirect 0x12) D)))
    , testCase "SET 2,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0xd3      ] (SETidx 2 (IXindirect 0x13) E)))
    , testCase "SET 2,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0xd4      ] (SETidx 2 (IXindirect 0x14) H)))
    , testCase "SET 2,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0xd5      ] (SETidx 2 (IXindirect 0x15) L)))
    , testCase "SET 2,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0xd6      ] (SET 2 (IXindirect 0x16))))
    , testCase "SET 2,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0xd7      ] (SETidx 2 (IXindirect 0x17) A)))
    , testCase "SET 3,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0xd8      ] (SETidx 3 (IXindirect 0x10) B)))
    , testCase "SET 3,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0xd9      ] (SETidx 3 (IXindirect 0x11) C)))
    , testCase "SET 3,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0xda      ] (SETidx 3 (IXindirect 0x12) D)))
    , testCase "SET 3,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0xdb      ] (SETidx 3 (IXindirect 0x13) E)))
    , testCase "SET 3,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0xdc      ] (SETidx 3 (IXindirect 0x14) H)))
    , testCase "SET 3,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0xdd      ] (SETidx 3 (IXindirect 0x15) L)))
    , testCase "SET 3,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0xde      ] (SET 3 (IXindirect 0x16))))
    , testCase "SET 3,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0xdf      ] (SETidx 3 (IXindirect 0x17) A)))
    , testCase "SET 4,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0xe0      ] (SETidx 4 (IXindirect 0x10) B)))
    , testCase "SET 4,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0xe1      ] (SETidx 4 (IXindirect 0x11) C)))
    , testCase "SET 4,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0xe2      ] (SETidx 4 (IXindirect 0x12) D)))
    , testCase "SET 4,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0xe3      ] (SETidx 4 (IXindirect 0x13) E)))
    , testCase "SET 4,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0xe4      ] (SETidx 4 (IXindirect 0x14) H)))
    , testCase "SET 4,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0xe5      ] (SETidx 4 (IXindirect 0x15) L)))
    , testCase "SET 4,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0xe6      ] (SET 4 (IXindirect 0x16))))
    , testCase "SET 4,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0xe7      ] (SETidx 4 (IXindirect 0x17) A)))
    , testCase "SET 5,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0xe8      ] (SETidx 5 (IXindirect 0x10) B)))
    , testCase "SET 5,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0xe9      ] (SETidx 5 (IXindirect 0x11) C)))
    , testCase "SET 5,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0xea      ] (SETidx 5 (IXindirect 0x12) D)))
    , testCase "SET 5,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0xeb      ] (SETidx 5 (IXindirect 0x13) E)))
    , testCase "SET 5,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0xec      ] (SETidx 5 (IXindirect 0x14) H)))
    , testCase "SET 5,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0xed      ] (SETidx 5 (IXindirect 0x15) L)))
    , testCase "SET 5,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0xee      ] (SET 5 (IXindirect 0x16))))
    , testCase "SET 5,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0xef      ] (SETidx 5 (IXindirect 0x17) A)))
    , testCase "SET 6,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0xf0      ] (SETidx 6 (IXindirect 0x10) B)))
    , testCase "SET 6,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0xf1      ] (SETidx 6 (IXindirect 0x11) C)))
    , testCase "SET 6,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0xf2      ] (SETidx 6 (IXindirect 0x12) D)))
    , testCase "SET 6,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0xf3      ] (SETidx 6 (IXindirect 0x13) E)))
    , testCase "SET 6,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0xf4      ] (SETidx 6 (IXindirect 0x14) H)))
    , testCase "SET 6,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0xf5      ] (SETidx 6 (IXindirect 0x15) L)))
    , testCase "SET 6,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0xf6      ] (SET 6 (IXindirect 0x16))))
    , testCase "SET 6,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0xf7      ] (SETidx 6 (IXindirect 0x17) A)))
    , testCase "SET 7,(IX+d)->B     " (z80instTest (TI [0xdd, 0xCB, 0x10, 0xf8      ] (SETidx 7 (IXindirect 0x10) B)))
    , testCase "SET 7,(IX+d)->C     " (z80instTest (TI [0xdd, 0xCB, 0x11, 0xf9      ] (SETidx 7 (IXindirect 0x11) C)))
    , testCase "SET 7,(IX+d)->D     " (z80instTest (TI [0xdd, 0xCB, 0x12, 0xfa      ] (SETidx 7 (IXindirect 0x12) D)))
    , testCase "SET 7,(IX+d)->E     " (z80instTest (TI [0xdd, 0xCB, 0x13, 0xfb      ] (SETidx 7 (IXindirect 0x13) E)))
    , testCase "SET 7,(IX+d)->H     " (z80instTest (TI [0xdd, 0xCB, 0x14, 0xfc      ] (SETidx 7 (IXindirect 0x14) H)))
    , testCase "SET 7,(IX+d)->L     " (z80instTest (TI [0xdd, 0xCB, 0x15, 0xfd      ] (SETidx 7 (IXindirect 0x15) L)))
    , testCase "SET 7,(IX+d)        " (z80instTest (TI [0xdd, 0xCB, 0x16, 0xfe      ] (SET 7 (IXindirect 0x16))))
    , testCase "SET 7,(IX+d)->A     " (z80instTest (TI [0xdd, 0xCB, 0x17, 0xff      ] (SETidx 7 (IXindirect 0x17) A)))
    , testCase "0xdd CALL Z,NN      " (z80instTest (TI [0xdd, 0xCC, 0x56, 0x78      ] (CALLCC Z (AbsAddr 0x7856))))
    , testCase "0xdd CALL NN        " (z80instTest (TI [0xdd, 0xCD, 0x9a, 0xbc      ] (CALL (AbsAddr 0xbc9a))))
    , testCase "0xdd ADC A,N        " (z80instTest (TI [0xdd, 0xCE, 0xde            ] (ADC8 (ALUAcc (ALUimm 0xde)))))
    , testCase "0xdd RST 8H         " (z80instTest (TI [0xdd, 0xCF                  ] (RST 8)))
    , testCase "0xdd RET NC         " (z80instTest (TI [0xdd, 0xD0                  ] (RETCC NC)))
    , testCase "0xdd POP DE         " (z80instTest (TI [0xdd, 0xD1                  ] (POP (AFPair16 DE))))
    , testCase "0xdd JP NC,$+3      " (z80instTest (TI [0xdd, 0xD2, 0xdd, 0xcc      ] (JPCC NC  (AbsAddr 0xccdd))))
    , testCase "0xdd OUT (N),A      " (z80instTest (TI [0xdd, 0xD3, 0x0f            ] (OUT (PortImm 0x0f))))
    , testCase "0xdd CALL NC,NN     " (z80instTest (TI [0xdd, 0xD4, 0x12, 0x34      ] (CALLCC NC (AbsAddr 0x3412))))
    , testCase "0xdd PUSH DE        " (z80instTest (TI [0xdd, 0xD5                  ] (PUSH (AFPair16 DE))))
    , testCase "0xdd SUB N          " (z80instTest (TI [0xdd, 0xD6, 0x9a            ] (SUB (ALUimm 0x9a))))
    , testCase "0xdd RST 10H        " (z80instTest (TI [0xdd, 0xD7                  ] (RST 0x10)))
    , testCase "0xdd RET C          " (z80instTest (TI [0xdd, 0xD8                  ] (RETCC CY)))
    , testCase "0xdd EXX            " (z80instTest (TI [0xdd, 0xD9                  ] (EXC Primes)))
    , testCase "0xdd JP C,$+3       " (z80instTest (TI [0xdd, 0xDA, 0x54, 0xa4      ] (JPCC CY (AbsAddr 0xa454))))
    , testCase "0xdd IN A,(N)       " (z80instTest (TI [0xdd, 0xDB, 0xbc            ] (IN (PortImm 0xbc))))
    , testCase "0xdd CALL C,NN      " (z80instTest (TI [0xdd, 0xDC, 0xde, 0x0f      ] (CALLCC CY (AbsAddr 0x0fde))))
    , testCase "0xdd SBC A,N        " (z80instTest (TI [0xdd, 0xDE, 0x56            ] (SBC8 (ALUAcc (ALUimm 0x56)))))
    , testCase "0xdd RST 18H        " (z80instTest (TI [0xdd, 0xDF                  ] (RST 0x18)))
    , testCase "0xdd RET PO         " (z80instTest (TI [0xdd, 0xE0                  ] (RETCC PO)))
    , testCase "POP IX              " (z80instTest (TI [0xDD, 0xE1                  ] (POP (AFPair16 IX))))
    , testCase "0xdd JP PO,$+3      " (z80instTest (TI [0xdd, 0xE2, 0x03, 0x61      ] (JPCC PO (AbsAddr 0x6103))))
    , testCase "EX (SP),IX          " (z80instTest (TI [0xDD, 0xE3                  ] (EXC SPIX)))
    , testCase "0xdd CALL PO,NN     " (z80instTest (TI [0xdd, 0xE4, 0x78, 0x9a      ] (CALLCC PO (AbsAddr 0x9a78))))
    , testCase "PUSH IX             " (z80instTest (TI [0xDD, 0xE5                  ] (PUSH (AFPair16 IX))))
    , testCase "0xdd AND N          " (z80instTest (TI [0xdd, 0xE6, 0xbc            ] (AND (ALUimm 0xbc))))
    , testCase "0xdd RST 20H        " (z80instTest (TI [0xdd, 0xE7                  ] (RST 0x20)))
    , testCase "0xdd RET PE         " (z80instTest (TI [0xdd, 0xE8                  ] (RETCC PE)))
    , testCase "JP (IX)             " (z80instTest (TI [0xDD, 0xE9                  ] (JPIX)))
    , testCase "0xdd JP PE,$+3      " (z80instTest (TI [0xdd, 0xEA, 0x35, 0x9f      ] (JPCC PE (AbsAddr 0x9f35))))
    , testCase "0xdd EX DE,HL       " (z80instTest (TI [0xdd, 0xEB                  ] (EXC DEHL)))
    , testCase "0xdd CALL PE,NN     " (z80instTest (TI [0xdd, 0xEC, 0xde, 0x0f      ] (CALLCC PE (AbsAddr 0x0fde))))
    , testCase "0xdd XOR N          " (z80instTest (TI [0xdd, 0xEE, 0x12            ] (XOR (ALUimm 0x12))))
    , testCase "0xdd RST 28H        " (z80instTest (TI [0xdd, 0xEF                  ] (RST 0x28)))
    , testCase "0xdd RET P          " (z80instTest (TI [0xdd, 0xF0                  ] (RETCC POS)))
    , testCase "0xdd POP AF         " (z80instTest (TI [0xdd, 0xF1                  ] (POP AF)))
    , testCase "0xdd JP P,$+3       " (z80instTest (TI [0xdd, 0xF2, 0xcd, 0xab      ] (JPCC POS (AbsAddr 0xabcd))))
    , testCase "0xdd DI             " (z80instTest (TI [0xdd, 0xF3                  ] DI))
    , testCase "0xdd CALL P,NN      " (z80instTest (TI [0xdd, 0xF4, 0x34, 0x56      ] (CALLCC POS (AbsAddr 0x5634))))
    , testCase "0xdd PUSH AF        " (z80instTest (TI [0xdd, 0xF5                  ] (PUSH AF)))
    , testCase "0xdd OR N           " (z80instTest (TI [0xdd, 0xF6, 0x78            ] (OR (ALUimm 0x78))))
    , testCase "0xdd RST 30H        " (z80instTest (TI [0xdd, 0xF7                  ] (RST 0x30)))
    , testCase "0xdd RET M          " (z80instTest (TI [0xdd, 0xF8                  ] (RETCC MI)))
    , testCase "LD SP,IX            " (z80instTest (TI [0xDD, 0xF9                  ] (LDSPIX)))
    , testCase "0xdd JP M,$+3       " (z80instTest (TI [0xdd, 0xFA, 0x44, 0x99      ] (JPCC MI (AbsAddr 0x9944))))
    , testCase "0xdd EI             " (z80instTest (TI [0xdd, 0xFB                  ] EI))
    , testCase "0xdd CALL M,NN      " (z80instTest (TI [0xdd, 0xFC, 0x9a, 0xbc      ] (CALLCC MI (AbsAddr 0xbc9a))))
    , testCase "0xdd CP N           " (z80instTest (TI [0xdd, 0xFE, 0xde            ] (CP (ALUimm 0xde))))
    , testCase "0xdd RST 38H        " (z80instTest (TI [0xdd, 0xFF                  ] (RST 0x38)))
    ]
  , testGroup "0xed prefix (Utility and extension instructions)"
    [ testCase "0xed 0x00           " (z80instTest (TI [0xed, 0x00                  ] (Z80undef [0xed, 0x00])))
    , testCase "0xed 0x01           " (z80instTest (TI [0xed, 0x01                  ] (Z80undef [0xed, 0x01])))
    , testCase "0xed 0x02           " (z80instTest (TI [0xed, 0x02                  ] (Z80undef [0xed, 0x02])))
    , testCase "0xed 0x03           " (z80instTest (TI [0xed, 0x03                  ] (Z80undef [0xed, 0x03])))
    , testCase "0xed 0x04           " (z80instTest (TI [0xed, 0x04                  ] (Z80undef [0xed, 0x04])))
    , testCase "0xed 0x05           " (z80instTest (TI [0xed, 0x05                  ] (Z80undef [0xed, 0x05])))
    , testCase "0xed 0x06           " (z80instTest (TI [0xed, 0x06                  ] (Z80undef [0xed, 0x06])))
    , testCase "0xed 0x07           " (z80instTest (TI [0xed, 0x07                  ] (Z80undef [0xed, 0x07])))
    , testCase "0xed 0x08           " (z80instTest (TI [0xed, 0x08                  ] (Z80undef [0xed, 0x08])))
    , testCase "0xed 0x09           " (z80instTest (TI [0xed, 0x09                  ] (Z80undef [0xed, 0x09])))
    , testCase "0xed 0x0a           " (z80instTest (TI [0xed, 0x0a                  ] (Z80undef [0xed, 0x0a])))
    , testCase "0xed 0x0b           " (z80instTest (TI [0xed, 0x0b                  ] (Z80undef [0xed, 0x0b])))
    , testCase "0xed 0x0c           " (z80instTest (TI [0xed, 0x0c                  ] (Z80undef [0xed, 0x0c])))
    , testCase "0xed 0x0d           " (z80instTest (TI [0xed, 0x0d                  ] (Z80undef [0xed, 0x0d])))
    , testCase "0xed 0x0e           " (z80instTest (TI [0xed, 0x0e                  ] (Z80undef [0xed, 0x0e])))
    , testCase "0xed 0x0f           " (z80instTest (TI [0xed, 0x0f                  ] (Z80undef [0xed, 0x0f])))
    , testCase "0xed 0x10           " (z80instTest (TI [0xed, 0x10                  ] (Z80undef [0xed, 0x10])))
    , testCase "0xed 0x11           " (z80instTest (TI [0xed, 0x11                  ] (Z80undef [0xed, 0x11])))
    , testCase "0xed 0x12           " (z80instTest (TI [0xed, 0x12                  ] (Z80undef [0xed, 0x12])))
    , testCase "0xed 0x13           " (z80instTest (TI [0xed, 0x13                  ] (Z80undef [0xed, 0x13])))
    , testCase "0xed 0x14           " (z80instTest (TI [0xed, 0x14                  ] (Z80undef [0xed, 0x14])))
    , testCase "0xed 0x15           " (z80instTest (TI [0xed, 0x15                  ] (Z80undef [0xed, 0x15])))
    , testCase "0xed 0x16           " (z80instTest (TI [0xed, 0x16                  ] (Z80undef [0xed, 0x16])))
    , testCase "0xed 0x17           " (z80instTest (TI [0xed, 0x17                  ] (Z80undef [0xed, 0x17])))
    , testCase "0xed 0x18           " (z80instTest (TI [0xed, 0x18                  ] (Z80undef [0xed, 0x18])))
    , testCase "0xed 0x19           " (z80instTest (TI [0xed, 0x19                  ] (Z80undef [0xed, 0x19])))
    , testCase "0xed 0x1a           " (z80instTest (TI [0xed, 0x1a                  ] (Z80undef [0xed, 0x1a])))
    , testCase "0xed 0x1b           " (z80instTest (TI [0xed, 0x1b                  ] (Z80undef [0xed, 0x1b])))
    , testCase "0xed 0x1c           " (z80instTest (TI [0xed, 0x1c                  ] (Z80undef [0xed, 0x1c])))
    , testCase "0xed 0x1d           " (z80instTest (TI [0xed, 0x1d                  ] (Z80undef [0xed, 0x1d])))
    , testCase "0xed 0x1e           " (z80instTest (TI [0xed, 0x1e                  ] (Z80undef [0xed, 0x1e])))
    , testCase "0xed 0x1f           " (z80instTest (TI [0xed, 0x1f                  ] (Z80undef [0xed, 0x1f])))
    , testCase "0xed 0x20           " (z80instTest (TI [0xed, 0x20                  ] (Z80undef [0xed, 0x20])))
    , testCase "0xed 0x21           " (z80instTest (TI [0xed, 0x21                  ] (Z80undef [0xed, 0x21])))
    , testCase "0xed 0x22           " (z80instTest (TI [0xed, 0x22                  ] (Z80undef [0xed, 0x22])))
    , testCase "0xed 0x23           " (z80instTest (TI [0xed, 0x23                  ] (Z80undef [0xed, 0x23])))
    , testCase "0xed 0x24           " (z80instTest (TI [0xed, 0x24                  ] (Z80undef [0xed, 0x24])))
    , testCase "0xed 0x25           " (z80instTest (TI [0xed, 0x25                  ] (Z80undef [0xed, 0x25])))
    , testCase "0xed 0x26           " (z80instTest (TI [0xed, 0x26                  ] (Z80undef [0xed, 0x26])))
    , testCase "0xed 0x27           " (z80instTest (TI [0xed, 0x27                  ] (Z80undef [0xed, 0x27])))
    , testCase "0xed 0x28           " (z80instTest (TI [0xed, 0x28                  ] (Z80undef [0xed, 0x28])))
    , testCase "0xed 0x29           " (z80instTest (TI [0xed, 0x29                  ] (Z80undef [0xed, 0x29])))
    , testCase "0xed 0x2a           " (z80instTest (TI [0xed, 0x2a                  ] (Z80undef [0xed, 0x2a])))
    , testCase "0xed 0x2b           " (z80instTest (TI [0xed, 0x2b                  ] (Z80undef [0xed, 0x2b])))
    , testCase "0xed 0x2c           " (z80instTest (TI [0xed, 0x2c                  ] (Z80undef [0xed, 0x2c])))
    , testCase "0xed 0x2d           " (z80instTest (TI [0xed, 0x2d                  ] (Z80undef [0xed, 0x2d])))
    , testCase "0xed 0x2e           " (z80instTest (TI [0xed, 0x2e                  ] (Z80undef [0xed, 0x2e])))
    , testCase "0xed 0x2f           " (z80instTest (TI [0xed, 0x2f                  ] (Z80undef [0xed, 0x2f])))
    , testCase "0xed 0x30           " (z80instTest (TI [0xed, 0x30                  ] (Z80undef [0xed, 0x30])))
    , testCase "0xed 0x31           " (z80instTest (TI [0xed, 0x31                  ] (Z80undef [0xed, 0x31])))
    , testCase "0xed 0x32           " (z80instTest (TI [0xed, 0x32                  ] (Z80undef [0xed, 0x32])))
    , testCase "0xed 0x33           " (z80instTest (TI [0xed, 0x33                  ] (Z80undef [0xed, 0x33])))
    , testCase "0xed 0x34           " (z80instTest (TI [0xed, 0x34                  ] (Z80undef [0xed, 0x34])))
    , testCase "0xed 0x35           " (z80instTest (TI [0xed, 0x35                  ] (Z80undef [0xed, 0x35])))
    , testCase "0xed 0x36           " (z80instTest (TI [0xed, 0x36                  ] (Z80undef [0xed, 0x36])))
    , testCase "0xed 0x37           " (z80instTest (TI [0xed, 0x37                  ] (Z80undef [0xed, 0x37])))
    , testCase "0xed 0x38           " (z80instTest (TI [0xed, 0x38                  ] (Z80undef [0xed, 0x38])))
    , testCase "0xed 0x39           " (z80instTest (TI [0xed, 0x39                  ] (Z80undef [0xed, 0x39])))
    , testCase "0xed 0x3a           " (z80instTest (TI [0xed, 0x3a                  ] (Z80undef [0xed, 0x3a])))
    , testCase "0xed 0x3b           " (z80instTest (TI [0xed, 0x3b                  ] (Z80undef [0xed, 0x3b])))
    , testCase "0xed 0x3c           " (z80instTest (TI [0xed, 0x3c                  ] (Z80undef [0xed, 0x3c])))
    , testCase "0xed 0x3d           " (z80instTest (TI [0xed, 0x3d                  ] (Z80undef [0xed, 0x3d])))
    , testCase "0xed 0x3e           " (z80instTest (TI [0xed, 0x3e                  ] (Z80undef [0xed, 0x3e])))
    , testCase "0xed 0x3f           " (z80instTest (TI [0xed, 0x3f                  ] (Z80undef [0xed, 0x3f])))
    , testCase "IN B,(C)            " (z80instTest (TI [0xED, 0x40                  ] (IN (CIndIO B))))
    , testCase "OUT (C),B           " (z80instTest (TI [0xED, 0x41                  ] (OUT (CIndIO B))))
    , testCase "SBC HL,BC           " (z80instTest (TI [0xED, 0x42                  ] (SBC16 DestHL (RPair16 BC))))
    , testCase "LD (NN),BC          " (z80instTest (TI [0xED, 0x43, 0x9a, 0xbc      ] (LD (RPIndirectStore (RPair16 BC) (AbsAddr 0xbc9a)))))
    , testCase "NEG                 " (z80instTest (TI [0xED, 0x44                  ] NEG))
    , testCase "RETN                " (z80instTest (TI [0xED, 0x45                  ] RETN))
    , testCase "IM 0                " (z80instTest (TI [0xED, 0x46                  ] (IM 0)))
    , testCase "LD I,A              " (z80instTest (TI [0xED, 0x47                  ] (LD IRegAcc)))
    , testCase "IN C,(C)            " (z80instTest (TI [0xED, 0x48                  ] (IN (CIndIO C))))
    , testCase "OUT (C),C           " (z80instTest (TI [0xED, 0x49                  ] (OUT (CIndIO C))))
    , testCase "ADC HL,BC           " (z80instTest (TI [0xED, 0x4A                  ] (ADC16 DestHL (RPair16 BC))))
    , testCase "LD BC,(NN)          " (z80instTest (TI [0xED, 0x4B, 0xde, 0x0f      ] (LD (RPIndirectLoad (RPair16 BC) (AbsAddr 0x0fde)))))
    , testCase "NEG                 " (z80instTest (TI [0xED, 0x4C                  ] NEG))
    , testCase "RETI                " (z80instTest (TI [0xED, 0x4D                  ] RETI))
    , testCase "IM 0                " (z80instTest (TI [0xED, 0x4E                  ] (IM 0)))
    , testCase "LD R,A              " (z80instTest (TI [0xED, 0x4F                  ] (LD RRegAcc)))
    , testCase "IN D,(C)            " (z80instTest (TI [0xED, 0x50                  ] (IN (CIndIO D))))
    , testCase "OUT (C),D           " (z80instTest (TI [0xED, 0x51                  ] (OUT (CIndIO D))))
    , testCase "SBC HL,DE           " (z80instTest (TI [0xED, 0x52                  ] (SBC16 DestHL (RPair16 DE))))
    , testCase "LD (NN),DE          " (z80instTest (TI [0xED, 0x53, 0x12, 0x34      ] (LD (RPIndirectStore (RPair16 DE) (AbsAddr 0x3412)))))
    , testCase "NEG                 " (z80instTest (TI [0xED, 0x54                  ] NEG))
    , testCase "RETN                " (z80instTest (TI [0xED, 0x55                  ] RETN))
    , testCase "IM 1                " (z80instTest (TI [0xED, 0x56                  ] (IM 1)))
    , testCase "LD A,I              " (z80instTest (TI [0xED, 0x57                  ] (LD AccIReg)))
    , testCase "IN E,(C)            " (z80instTest (TI [0xED, 0x58                  ] (IN (CIndIO E))))
    , testCase "OUT (C),E           " (z80instTest (TI [0xED, 0x59                  ] (OUT (CIndIO E))))
    , testCase "ADC HL,DE           " (z80instTest (TI [0xED, 0x5A                  ] (ADC16 DestHL (RPair16 DE))))
    , testCase "LD DE,(NN)          " (z80instTest (TI [0xED, 0x5B, 0x56, 0x78      ] (LD (RPIndirectLoad (RPair16 DE) (AbsAddr 0x7856)))))
    , testCase "NEG                 " (z80instTest (TI [0xED, 0x5C                  ] NEG))
    , testCase "RETI                " (z80instTest (TI [0xED, 0x5D                  ] RETI))
    , testCase "IM 2                " (z80instTest (TI [0xED, 0x5E                  ] (IM 2)))
    , testCase "LD A,R              " (z80instTest (TI [0xED, 0x5F                  ] (LD AccRReg)))
    , testCase "IN H,(C)            " (z80instTest (TI [0xED, 0x60                  ] (IN (CIndIO H))))
    , testCase "OUT (C),H           " (z80instTest (TI [0xED, 0x61                  ] (OUT (CIndIO H))))
    , testCase "SBC HL,HL           " (z80instTest (TI [0xED, 0x62                  ] (SBC16 DestHL (RPair16 HL))))
    , testCase "LD (NN),HL          " (z80instTest (TI [0xED, 0x63, 0x9a, 0xbc      ] (LD (RPIndirectStore (RPair16 HL) (AbsAddr 0xbc9a)))))
    , testCase "NEG                 " (z80instTest (TI [0xED, 0x64                  ] NEG))
    , testCase "RETN                " (z80instTest (TI [0xED, 0x65                  ] RETN))
    , testCase "IM 0                " (z80instTest (TI [0xED, 0x66                  ] (IM 0)))
    , testCase "RRD                 " (z80instTest (TI [0xED, 0x67                  ] RRD))
    , testCase "IN L,(C)            " (z80instTest (TI [0xED, 0x68                  ] (IN (CIndIO L))))
    , testCase "OUT (C),L           " (z80instTest (TI [0xED, 0x69                  ] (OUT (CIndIO L))))
    , testCase "ADC HL,HL           " (z80instTest (TI [0xED, 0x6A                  ] (ADC16 DestHL (RPair16 HL))))
    , testCase "LD HL,(NN)          " (z80instTest (TI [0xED, 0x6B, 0x9a, 0xbc      ] (LD (RPIndirectLoad (RPair16 HL) (AbsAddr 0xbc9a)))))
    , testCase "NEG                 " (z80instTest (TI [0xED, 0x6C                  ] NEG))
    , testCase "RETI                " (z80instTest (TI [0xED, 0x6D                  ] RETI))
    , testCase "IM 0                " (z80instTest (TI [0xED, 0x6E                  ] (IM 0)))
    , testCase "RLD                 " (z80instTest (TI [0xED, 0x6F                  ] RLD))
    , testCase "IN (C)              " (z80instTest (TI [0xED, 0x70                  ] (IN CIndIO0)))
    , testCase "OUT (C),0           " (z80instTest (TI [0xED, 0x71                  ] (OUT CIndIO0)))
    , testCase "SBC HL,SP           " (z80instTest (TI [0xED, 0x72                  ] (SBC16 DestHL SP)))
    , testCase "LD (NN),SP          " (z80instTest (TI [0xED, 0x73, 0x9a, 0xbc      ] (LD (RPIndirectStore SP (AbsAddr 0xbc9a)))))
    , testCase "NEG                 " (z80instTest (TI [0xED, 0x74                  ] NEG))
    , testCase "RETN                " (z80instTest (TI [0xED, 0x75                  ] RETN))
    , testCase "IM 1                " (z80instTest (TI [0xED, 0x76                  ] (IM 1)))
    , testCase "0xed 0x77           " (z80instTest (TI [0xED, 0x77                  ] (Z80undef [0xed, 0x77])))
    , testCase "IN A,(C)            " (z80instTest (TI [0xED, 0x78                  ] (IN (CIndIO A))))
    , testCase "OUT (C),A           " (z80instTest (TI [0xED, 0x79                  ] (OUT (CIndIO A))))
    , testCase "ADC HL,SP           " (z80instTest (TI [0xED, 0x7A                  ] (ADC16 DestHL SP)))
    , testCase "LD SP,(NN)          " (z80instTest (TI [0xED, 0x7B, 0xde, 0x0f      ] (LD (RPIndirectLoad SP (AbsAddr 0x0fde)))))
    , testCase "NEG                 " (z80instTest (TI [0xED, 0x7C                  ] NEG))
    , testCase "RETI                " (z80instTest (TI [0xED, 0x7D                  ] RETI))
    , testCase "IM 2                " (z80instTest (TI [0xED, 0x7E                  ] (IM 2)))
    , testCase "0xed 0x7f           " (z80instTest (TI [0xED, 0x7F                  ] (Z80undef [0xed, 0x7F])))
    , testCase "0xed 0x80           " (z80instTest (TI [0xed, 0x80                  ] (Z80undef [0xed, 0x80])))
    , testCase "0xed 0x81           " (z80instTest (TI [0xed, 0x81                  ] (Z80undef [0xed, 0x81])))
    , testCase "0xed 0x82           " (z80instTest (TI [0xed, 0x82                  ] (Z80undef [0xed, 0x82])))
    , testCase "0xed 0x83           " (z80instTest (TI [0xed, 0x83                  ] (Z80undef [0xed, 0x83])))
    , testCase "0xed 0x84           " (z80instTest (TI [0xed, 0x84                  ] (Z80undef [0xed, 0x84])))
    , testCase "0xed 0x85           " (z80instTest (TI [0xed, 0x85                  ] (Z80undef [0xed, 0x85])))
    , testCase "0xed 0x86           " (z80instTest (TI [0xed, 0x86                  ] (Z80undef [0xed, 0x86])))
    , testCase "0xed 0x87           " (z80instTest (TI [0xed, 0x87                  ] (Z80undef [0xed, 0x87])))
    , testCase "0xed 0x88           " (z80instTest (TI [0xed, 0x88                  ] (Z80undef [0xed, 0x88])))
    , testCase "0xed 0x89           " (z80instTest (TI [0xed, 0x89                  ] (Z80undef [0xed, 0x89])))
    , testCase "0xed 0x8a           " (z80instTest (TI [0xed, 0x8a                  ] (Z80undef [0xed, 0x8a])))
    , testCase "0xed 0x8b           " (z80instTest (TI [0xed, 0x8b                  ] (Z80undef [0xed, 0x8b])))
    , testCase "0xed 0x8c           " (z80instTest (TI [0xed, 0x8c                  ] (Z80undef [0xed, 0x8c])))
    , testCase "0xed 0x8d           " (z80instTest (TI [0xed, 0x8d                  ] (Z80undef [0xed, 0x8d])))
    , testCase "0xed 0x8e           " (z80instTest (TI [0xed, 0x8e                  ] (Z80undef [0xed, 0x8e])))
    , testCase "0xed 0x8f           " (z80instTest (TI [0xed, 0x8f                  ] (Z80undef [0xed, 0x8f])))
    , testCase "0xed 0x90           " (z80instTest (TI [0xed, 0x90                  ] (Z80undef [0xed, 0x90])))
    , testCase "0xed 0x91           " (z80instTest (TI [0xed, 0x91                  ] (Z80undef [0xed, 0x91])))
    , testCase "0xed 0x92           " (z80instTest (TI [0xed, 0x92                  ] (Z80undef [0xed, 0x92])))
    , testCase "0xed 0x93           " (z80instTest (TI [0xed, 0x93                  ] (Z80undef [0xed, 0x93])))
    , testCase "0xed 0x94           " (z80instTest (TI [0xed, 0x94                  ] (Z80undef [0xed, 0x94])))
    , testCase "0xed 0x95           " (z80instTest (TI [0xed, 0x95                  ] (Z80undef [0xed, 0x95])))
    , testCase "0xed 0x96           " (z80instTest (TI [0xed, 0x96                  ] (Z80undef [0xed, 0x96])))
    , testCase "0xed 0x97           " (z80instTest (TI [0xed, 0x97                  ] (Z80undef [0xed, 0x97])))
    , testCase "0xed 0x98           " (z80instTest (TI [0xed, 0x98                  ] (Z80undef [0xed, 0x98])))
    , testCase "0xed 0x99           " (z80instTest (TI [0xed, 0x99                  ] (Z80undef [0xed, 0x99])))
    , testCase "0xed 0x9a           " (z80instTest (TI [0xed, 0x9a                  ] (Z80undef [0xed, 0x9a])))
    , testCase "0xed 0x9b           " (z80instTest (TI [0xed, 0x9b                  ] (Z80undef [0xed, 0x9b])))
    , testCase "0xed 0x9c           " (z80instTest (TI [0xed, 0x9c                  ] (Z80undef [0xed, 0x9c])))
    , testCase "0xed 0x9d           " (z80instTest (TI [0xed, 0x9d                  ] (Z80undef [0xed, 0x9d])))
    , testCase "0xed 0x9e           " (z80instTest (TI [0xed, 0x9e                  ] (Z80undef [0xed, 0x9e])))
    , testCase "0xed 0x9f           " (z80instTest (TI [0xed, 0x9f                  ] (Z80undef [0xed, 0x9f])))
    , testCase "LDI                 " (z80instTest (TI [0xED, 0xA0                  ] (LDI)))
    , testCase "CPI                 " (z80instTest (TI [0xED, 0xA1                  ] (CPI)))
    , testCase "INI                 " (z80instTest (TI [0xED, 0xA2                  ] (INI)))
    , testCase "OUTI                " (z80instTest (TI [0xED, 0xA3                  ] (OUTI)))
    , testCase "0xed 0xa4           " (z80instTest (TI [0xed, 0xa4                  ] (Z80undef [0xed, 0xa4])))
    , testCase "0xed 0xa5           " (z80instTest (TI [0xed, 0xa5                  ] (Z80undef [0xed, 0xa5])))
    , testCase "0xed 0xa6           " (z80instTest (TI [0xed, 0xa6                  ] (Z80undef [0xed, 0xa6])))
    , testCase "0xed 0xa7           " (z80instTest (TI [0xed, 0xa7                  ] (Z80undef [0xed, 0xa7])))
    , testCase "LDD                 " (z80instTest (TI [0xED, 0xA8                  ] (LDD)))
    , testCase "CPD                 " (z80instTest (TI [0xED, 0xA9                  ] (CPD)))
    , testCase "IND                 " (z80instTest (TI [0xED, 0xAA                  ] (IND)))
    , testCase "OUTD                " (z80instTest (TI [0xED, 0xAB                  ] (OUTD)))
    , testCase "0xed 0xac           " (z80instTest (TI [0xed, 0xac                  ] (Z80undef [0xed, 0xac])))
    , testCase "0xed 0xad           " (z80instTest (TI [0xed, 0xad                  ] (Z80undef [0xed, 0xad])))
    , testCase "0xed 0xae           " (z80instTest (TI [0xed, 0xae                  ] (Z80undef [0xed, 0xae])))
    , testCase "0xed 0xaf           " (z80instTest (TI [0xed, 0xaf                  ] (Z80undef [0xed, 0xaf])))
    , testCase "LDIR                " (z80instTest (TI [0xED, 0xB0                  ] (LDIR)))
    , testCase "CPIR                " (z80instTest (TI [0xED, 0xB1                  ] (CPIR)))
    , testCase "INIR                " (z80instTest (TI [0xED, 0xB2                  ] (INIR)))
    , testCase "OTIR                " (z80instTest (TI [0xED, 0xB3                  ] (OTIR)))
    , testCase "0xed 0xb4           " (z80instTest (TI [0xed, 0xb4                  ] (Z80undef [0xed, 0xb4])))
    , testCase "0xed 0xb5           " (z80instTest (TI [0xed, 0xb5                  ] (Z80undef [0xed, 0xb5])))
    , testCase "0xed 0xb6           " (z80instTest (TI [0xed, 0xb6                  ] (Z80undef [0xed, 0xb6])))
    , testCase "0xed 0xb7           " (z80instTest (TI [0xed, 0xb7                  ] (Z80undef [0xed, 0xb7])))
    , testCase "LDDR                " (z80instTest (TI [0xED, 0xB8                  ] (LDDR)))
    , testCase "CPDR                " (z80instTest (TI [0xED, 0xB9                  ] (CPDR)))
    , testCase "INDR                " (z80instTest (TI [0xED, 0xBA                  ] (INDR)))
    , testCase "OTDR                " (z80instTest (TI [0xED, 0xBB                  ] (OTDR)))
    , testCase "0xed 0xbc           " (z80instTest (TI [0xed, 0xbc                  ] (Z80undef [0xed, 0xbc])))
    , testCase "0xed 0xbd           " (z80instTest (TI [0xed, 0xbd                  ] (Z80undef [0xed, 0xbd])))
    , testCase "0xed 0xbe           " (z80instTest (TI [0xed, 0xbe                  ] (Z80undef [0xed, 0xbe])))
    , testCase "0xed 0xbf           " (z80instTest (TI [0xed, 0xbf                  ] (Z80undef [0xed, 0xbf])))
      , testCase "0xed 0xc0           " (z80instTest (TI [0xed, 0xc0                  ] (Z80undef [0xed, 0xc0])))
    , testCase "0xed 0xc1           " (z80instTest (TI [0xed, 0xc1                  ] (Z80undef [0xed, 0xc1])))
    , testCase "0xed 0xc2           " (z80instTest (TI [0xed, 0xc2                  ] (Z80undef [0xed, 0xc2])))
    , testCase "0xed 0xc3           " (z80instTest (TI [0xed, 0xc3                  ] (Z80undef [0xed, 0xc3])))
    , testCase "0xed 0xc4           " (z80instTest (TI [0xed, 0xc4                  ] (Z80undef [0xed, 0xc4])))
    , testCase "0xed 0xc5           " (z80instTest (TI [0xed, 0xc5                  ] (Z80undef [0xed, 0xc5])))
    , testCase "0xed 0xc6           " (z80instTest (TI [0xed, 0xc6                  ] (Z80undef [0xed, 0xc6])))
    , testCase "0xed 0xc7           " (z80instTest (TI [0xed, 0xc7                  ] (Z80undef [0xed, 0xc7])))
    , testCase "0xed 0xc8           " (z80instTest (TI [0xed, 0xc8                  ] (Z80undef [0xed, 0xc8])))
    , testCase "0xed 0xc9           " (z80instTest (TI [0xed, 0xc9                  ] (Z80undef [0xed, 0xc9])))
    , testCase "0xed 0xca           " (z80instTest (TI [0xed, 0xca                  ] (Z80undef [0xed, 0xca])))
    , testCase "0xed 0xcb           " (z80instTest (TI [0xed, 0xcb                  ] (Z80undef [0xed, 0xcb])))
    , testCase "0xed 0xcc           " (z80instTest (TI [0xed, 0xcc                  ] (Z80undef [0xed, 0xcc])))
    , testCase "0xed 0xcd           " (z80instTest (TI [0xed, 0xcd                  ] (Z80undef [0xed, 0xcd])))
    , testCase "0xed 0xce           " (z80instTest (TI [0xed, 0xce                  ] (Z80undef [0xed, 0xce])))
    , testCase "0xed 0xcf           " (z80instTest (TI [0xed, 0xcf                  ] (Z80undef [0xed, 0xcf])))
    , testCase "0xed 0xd0           " (z80instTest (TI [0xed, 0xd0                  ] (Z80undef [0xed, 0xd0])))
    , testCase "0xed 0xd1           " (z80instTest (TI [0xed, 0xd1                  ] (Z80undef [0xed, 0xd1])))
    , testCase "0xed 0xd2           " (z80instTest (TI [0xed, 0xd2                  ] (Z80undef [0xed, 0xd2])))
    , testCase "0xed 0xd3           " (z80instTest (TI [0xed, 0xd3                  ] (Z80undef [0xed, 0xd3])))
    , testCase "0xed 0xd4           " (z80instTest (TI [0xed, 0xd4                  ] (Z80undef [0xed, 0xd4])))
    , testCase "0xed 0xd5           " (z80instTest (TI [0xed, 0xd5                  ] (Z80undef [0xed, 0xd5])))
    , testCase "0xed 0xd6           " (z80instTest (TI [0xed, 0xd6                  ] (Z80undef [0xed, 0xd6])))
    , testCase "0xed 0xd7           " (z80instTest (TI [0xed, 0xd7                  ] (Z80undef [0xed, 0xd7])))
    , testCase "0xed 0xd8           " (z80instTest (TI [0xed, 0xd8                  ] (Z80undef [0xed, 0xd8])))
    , testCase "0xed 0xd9           " (z80instTest (TI [0xed, 0xd9                  ] (Z80undef [0xed, 0xd9])))
    , testCase "0xed 0xda           " (z80instTest (TI [0xed, 0xda                  ] (Z80undef [0xed, 0xda])))
    , testCase "0xed 0xdb           " (z80instTest (TI [0xed, 0xdb                  ] (Z80undef [0xed, 0xdb])))
    , testCase "0xed 0xdc           " (z80instTest (TI [0xed, 0xdc                  ] (Z80undef [0xed, 0xdc])))
    , testCase "0xed 0xdd           " (z80instTest (TI [0xed, 0xdd                  ] (Z80undef [0xed, 0xdd])))
    , testCase "0xed 0xde           " (z80instTest (TI [0xed, 0xde                  ] (Z80undef [0xed, 0xde])))
    , testCase "0xed 0xdf           " (z80instTest (TI [0xed, 0xdf                  ] (Z80undef [0xed, 0xdf])))
    , testCase "0xed 0xe0           " (z80instTest (TI [0xed, 0xe0                  ] (Z80undef [0xed, 0xe0])))
    , testCase "0xed 0xe1           " (z80instTest (TI [0xed, 0xe1                  ] (Z80undef [0xed, 0xe1])))
    , testCase "0xed 0xe2           " (z80instTest (TI [0xed, 0xe2                  ] (Z80undef [0xed, 0xe2])))
    , testCase "0xed 0xe3           " (z80instTest (TI [0xed, 0xe3                  ] (Z80undef [0xed, 0xe3])))
    , testCase "0xed 0xe4           " (z80instTest (TI [0xed, 0xe4                  ] (Z80undef [0xed, 0xe4])))
    , testCase "0xed 0xe5           " (z80instTest (TI [0xed, 0xe5                  ] (Z80undef [0xed, 0xe5])))
    , testCase "0xed 0xe6           " (z80instTest (TI [0xed, 0xe6                  ] (Z80undef [0xed, 0xe6])))
    , testCase "0xed 0xe7           " (z80instTest (TI [0xed, 0xe7                  ] (Z80undef [0xed, 0xe7])))
    , testCase "0xed 0xe8           " (z80instTest (TI [0xed, 0xe8                  ] (Z80undef [0xed, 0xe8])))
    , testCase "0xed 0xe9           " (z80instTest (TI [0xed, 0xe9                  ] (Z80undef [0xed, 0xe9])))
    , testCase "0xed 0xea           " (z80instTest (TI [0xed, 0xea                  ] (Z80undef [0xed, 0xea])))
    , testCase "0xed 0xeb           " (z80instTest (TI [0xed, 0xeb                  ] (Z80undef [0xed, 0xeb])))
    , testCase "0xed 0xec           " (z80instTest (TI [0xed, 0xec                  ] (Z80undef [0xed, 0xec])))
    , testCase "0xed 0xed           " (z80instTest (TI [0xed, 0xed                  ] (Z80undef [0xed, 0xed])))
    , testCase "0xed 0xee           " (z80instTest (TI [0xed, 0xee                  ] (Z80undef [0xed, 0xee])))
    , testCase "0xed 0xef           " (z80instTest (TI [0xed, 0xef                  ] (Z80undef [0xed, 0xef])))
    , testCase "0xed 0xf0           " (z80instTest (TI [0xed, 0xf0                  ] (Z80undef [0xed, 0xf0])))
    , testCase "0xed 0xf1           " (z80instTest (TI [0xed, 0xf1                  ] (Z80undef [0xed, 0xf1])))
    , testCase "0xed 0xf2           " (z80instTest (TI [0xed, 0xf2                  ] (Z80undef [0xed, 0xf2])))
    , testCase "0xed 0xf3           " (z80instTest (TI [0xed, 0xf3                  ] (Z80undef [0xed, 0xf3])))
    , testCase "0xed 0xf4           " (z80instTest (TI [0xed, 0xf4                  ] (Z80undef [0xed, 0xf4])))
    , testCase "0xed 0xf5           " (z80instTest (TI [0xed, 0xf5                  ] (Z80undef [0xed, 0xf5])))
    , testCase "0xed 0xf6           " (z80instTest (TI [0xed, 0xf6                  ] (Z80undef [0xed, 0xf6])))
    , testCase "0xed 0xf7           " (z80instTest (TI [0xed, 0xf7                  ] (Z80undef [0xed, 0xf7])))
    , testCase "0xed 0xf8           " (z80instTest (TI [0xed, 0xf8                  ] (Z80undef [0xed, 0xf8])))
    , testCase "0xed 0xf9           " (z80instTest (TI [0xed, 0xf9                  ] (Z80undef [0xed, 0xf9])))
    , testCase "0xed 0xfa           " (z80instTest (TI [0xed, 0xfa                  ] (Z80undef [0xed, 0xfa])))
    , testCase "0xed 0xfb           " (z80instTest (TI [0xed, 0xfb                  ] (Z80undef [0xed, 0xfb])))
    , testCase "0xed 0xfc           " (z80instTest (TI [0xed, 0xfc                  ] (Z80undef [0xed, 0xfc])))
    , testCase "0xed 0xfd           " (z80instTest (TI [0xed, 0xfd                  ] (Z80undef [0xed, 0xfd])))
    , testCase "0xed 0xfe           " (z80instTest (TI [0xed, 0xfe                  ] (Z80undef [0xed, 0xfe])))
    , testCase "0xed 0xff           " (z80instTest (TI [0xed, 0xff                  ] (Z80undef [0xed, 0xff])))
    ]
  , testGroup "0xfd prefix (IY-indexed instructions)"
    [ testCase "0xfd NOP            " (z80instTest (TI [0xfd, 0x00                  ] NOP))
    , testCase "0xfd LD BC,NN       " (z80instTest (TI [0xfd, 0x01, 0x56, 0x78      ] (LD (RPair16ImmLoad (RPair16 BC) (AbsAddr 0x7856)))))
    , testCase "0xfd LD (BC),A      " (z80instTest (TI [0xfd, 0x02                  ] (LD BCIndirectStore)))
    , testCase "0xfd INC BC         " (z80instTest (TI [0xfd, 0x03                  ] (INC16 (RPair16 BC))))
    , testCase "0xfd INC B          " (z80instTest (TI [0xfd, 0x04                  ] (INC B)))
    , testCase "0xfd DEC B          " (z80instTest (TI [0xfd, 0x05                  ] (DEC B)))
    , testCase "0xfd LD B,N         " (z80instTest (TI [0xfd, 0x06, 0x9a            ] (LD (Reg8Imm B 0x9a))))
    , testCase "0xfd RLCA           " (z80instTest (TI [0xfd, 0x07                  ] RLCA))
    , testCase "0xfd EX AF,AF'      " (z80instTest (TI [0xfd, 0x08                  ] (EXC AFAF')))
    , testCase "ADD IY,BC           " (z80instTest (TI [0xFD, 0x09                  ] (ADD16 DestIY (RPair16 BC))))
    , testCase "0xfd LD A,(BC)      " (z80instTest (TI [0xfd, 0x0A                  ] (LD AccBCIndirect)))
    , testCase "0xfd DEC BC         " (z80instTest (TI [0xfd, 0x0B                  ] (DEC16 (RPair16 BC))))
    , testCase "0xfd INC C          " (z80instTest (TI [0xfd, 0x0C                  ] (INC C)))
    , testCase "0xfd DEC C          " (z80instTest (TI [0xfd, 0x0D                  ] (DEC C)))
    , testCase "0xfd LD C,N         " (z80instTest (TI [0xfd, 0x0E, 0xbc            ] (LD (Reg8Imm C 0xbc))))
    , testCase "0xfd RRCA           " (z80instTest (TI [0xfd, 0x0F                  ] RRCA))
    , testCase "0xfd DJNZ $+2       " (z80instTest (TI [0xfd, 0x10, 0xfe            ] (DJNZ (AbsAddr 0xe1))))
    , testCase "0xfd LD DE,NN       " (z80instTest (TI [0xfd, 0x11, 0xde, 0x0f      ] (LD (RPair16ImmLoad (RPair16 DE) (AbsAddr 0x0fde)))))
    , testCase "0xfd LD (DE),A      " (z80instTest (TI [0xfd, 0x12                  ] (LD DEIndirectStore)))
    , testCase "0xfd INC DE         " (z80instTest (TI [0xfd, 0x13                  ] (INC16 (RPair16 DE))))
    , testCase "0xfd INC D          " (z80instTest (TI [0xfd, 0x14                  ] (INC D)))
    , testCase "0xfd DEC D          " (z80instTest (TI [0xfd, 0x15                  ] (DEC D)))
    , testCase "0xfd LD D,N         " (z80instTest (TI [0xfd, 0x16, 0x12            ] (LD (Reg8Imm D 0x12))))
    , testCase "0xfd RLA            " (z80instTest (TI [0xfd, 0x17                  ] RLA))
    , testCase "0xfd JR $+2         " (z80instTest (TI [0xfd, 0x18, 0xfe            ] (JR (AbsAddr 0xe1))))
    , testCase "ADD IY,DE           " (z80instTest (TI [0xfd, 0x19                  ] (ADD16 DestIY (RPair16 DE))))
    , testCase "0xfd LD A,(DE)      " (z80instTest (TI [0xfd, 0x1A                  ] (LD AccDEIndirect)))
    , testCase "0xfd DEC DE         " (z80instTest (TI [0xfd, 0x1B                  ] (DEC16 (RPair16 DE))))
    , testCase "0xfd INC E          " (z80instTest (TI [0xfd, 0x1C                  ] (INC E)))
    , testCase "0xfd DEC E          " (z80instTest (TI [0xfd, 0x1D                  ] (DEC E)))
    , testCase "0xfd LD E,N         " (z80instTest (TI [0xfd, 0x1E, 0x34            ] (LD (Reg8Imm E 0x34))))
    , testCase "0xfd RRA            " (z80instTest (TI [0xfd, 0x1F                  ] RRA))
    , testCase "0xfd JR NZ,$+2      " (z80instTest (TI [0xfd, 0x20, 0xfe            ] (JRCC NZ (AbsAddr 0xe1))))
    , testCase "LD IY,NN            " (z80instTest (TI [0xFD, 0x21, 0x56, 0x78      ] (LD (RPair16ImmLoad (RPair16 IY) (AbsAddr 0x7856)))))
    , testCase "LD (NN),IY          " (z80instTest (TI [0xfd, 0x22, 0x9a, 0xbc      ] (LD (RPIndirectStore (RPair16 IY) (AbsAddr 0xbc9a)))))
    , testCase "INC IY              " (z80instTest (TI [0xfd, 0x23                  ] (INC16 (RPair16 IY))))
    , testCase "INC IYh             " (z80instTest (TI [0xfd, 0x24                  ] (INC IYh)))
    , testCase "DEC IYh             " (z80instTest (TI [0xfd, 0x25                  ] (DEC IYh)))
    , testCase "LD IYh,N            " (z80instTest (TI [0xfd, 0x26, 0xde            ] (LD (Reg8Imm IYh 0xde))))
    , testCase "0xfd DAA            " (z80instTest (TI [0xfd, 0x27                  ] DAA))
    , testCase "0xfd JR Z,$+2       " (z80instTest (TI [0xfd, 0x28, 0xfe            ] (JRCC Z (AbsAddr 0xe1))))
    , testCase "ADD IY,IY           " (z80instTest (TI [0xFD, 0x29                  ] (ADD16 DestIY (RPair16 IY))))
    , testCase "LD IY,(NN)          " (z80instTest (TI [0xFD, 0x2A, 0xde, 0x0f      ] (LD (RPIndirectLoad (RPair16 IY) (AbsAddr 0x0fde)))))
    , testCase "DEC IY              " (z80instTest (TI [0xFD, 0x2B                  ] (DEC16 (RPair16 IY))))
    , testCase "INC IYl             " (z80instTest (TI [0xfd, 0x2C                  ] (INC IYl)))
    , testCase "DEC IYl             " (z80instTest (TI [0xfd, 0x2D                  ] (DEC IYl)))
    , testCase "LD IYl,N            " (z80instTest (TI [0xfd, 0x2E, 0x34            ] (LD (Reg8Imm IYl 0x34))))
    , testCase "0xfd CPL            " (z80instTest (TI [0xfd, 0x2F                  ] CPL))
    , testCase "0xfd JR NC,$+2      " (z80instTest (TI [0xfd, 0x30, 0xfe            ] (JRCC NC (AbsAddr 0xe1))))
    , testCase "0xfd LD SP,NN       " (z80instTest (TI [0xfd, 0x31, 0x56, 0x78      ] (LD (RPair16ImmLoad SP (AbsAddr 0x7856)))))
    , testCase "0xfd LD (NN),A      " (z80instTest (TI [0xfd, 0x32, 0x9a, 0xbc      ] (LD (Imm16IndirectStore (AbsAddr 0xbc9a)))))
    , testCase "0xfd INC SP         " (z80instTest (TI [0xfd, 0x33                  ] (INC16 SP)))
    , testCase "INC (IY+N)          " (z80instTest (TI [0xFD, 0x34, 0x12            ] (INC (IYindirect 0x12))))
    , testCase "DEC (IY+N)          " (z80instTest (TI [0xFD, 0x35, 0x34            ] (DEC (IYindirect 0x34))))
    , testCase "LD (IY+N),N         " (z80instTest (TI [0xFD, 0x36, 0x56, 0x78      ] (LD (Reg8Imm (IYindirect 0x56) 0x78))))
    , testCase "0xfd SCF            " (z80instTest (TI [0xfd, 0x37                  ] SCF))
    , testCase "0xfd JR C,$+2       " (z80instTest (TI [0xfd, 0x38, 0xfe            ] (JRCC CY (AbsAddr 0xe1))))
    , testCase "ADD IY,SP           " (z80instTest (TI [0xfd, 0x39                  ] (ADD16 DestIY SP)))
    , testCase "0xfd LD A,(NN)      " (z80instTest (TI [0xfd, 0x3A, 0x0f, 0x12      ] (LD (AccImm16Indirect (AbsAddr 0x120f)))))
    , testCase "0xfd DEC SP         " (z80instTest (TI [0xfd, 0x3B                  ] (DEC16 SP)))
    , testCase "0xfd INC A          " (z80instTest (TI [0xfd, 0x3C                  ] (INC A)))
    , testCase "0xfd DEC A          " (z80instTest (TI [0xfd, 0x3D                  ] (DEC A)))
    , testCase "0xfd LD A,N         " (z80instTest (TI [0xfd, 0x3E, 0x34            ] (LD (Reg8Imm A 0x34))))
    , testCase "0xfd CCF            " (z80instTest (TI [0xfd, 0x3F                  ] CCF))
    , testCase "0xfd LD B,B         " (z80instTest (TI [0xfd, 0x40                  ] (LD (Reg8Reg8 B B))))
    , testCase "0xfd LD B,C         " (z80instTest (TI [0xfd, 0x41                  ] (LD (Reg8Reg8 B C))))
    , testCase "0xfd LD B,D         " (z80instTest (TI [0xfd, 0x42                  ] (LD (Reg8Reg8 B D))))
    , testCase "0xfd LD B,E         " (z80instTest (TI [0xfd, 0x43                  ] (LD (Reg8Reg8 B E))))
    , testCase "LD B,IYh            " (z80instTest (TI [0xfd, 0x44                  ] (LD (Reg8Reg8 B IYh))))
    , testCase "LD B,IYl            " (z80instTest (TI [0xfd, 0x45                  ] (LD (Reg8Reg8 B IYl))))
    , testCase "LD B,(IY+N)         " (z80instTest (TI [0xFD, 0x46, 0x9a            ] (LD (Reg8Reg8 B (IYindirect (negate 102))))))
    , testCase "0xfd LD B,A         " (z80instTest (TI [0xfd, 0x47                  ] (LD (Reg8Reg8 B A))))
    , testCase "0xfd LD C,B         " (z80instTest (TI [0xfd, 0x48                  ] (LD (Reg8Reg8 C B))))
    , testCase "0xfd LD C,C         " (z80instTest (TI [0xfd, 0x49                  ] (LD (Reg8Reg8 C C))))
    , testCase "0xfd LD C,D         " (z80instTest (TI [0xfd, 0x4A                  ] (LD (Reg8Reg8 C D))))
    , testCase "0xfd LD C,E         " (z80instTest (TI [0xfd, 0x4B                  ] (LD (Reg8Reg8 C E))))
    , testCase "LD C,IYh            " (z80instTest (TI [0xfd, 0x4C                  ] (LD (Reg8Reg8 C IYh))))
    , testCase "LD C,IYl            " (z80instTest (TI [0xfd, 0x4D                  ] (LD (Reg8Reg8 C IYl))))
    , testCase "LD C,(IY+N)         " (z80instTest (TI [0xFD, 0x4E, 0xbc            ] (LD (Reg8Reg8 C (IYindirect (negate 68))))))
    , testCase "0xfd LD C,A         " (z80instTest (TI [0xfd, 0x4F                  ] (LD (Reg8Reg8 C A))))
    , testCase "0xfd LD D,B         " (z80instTest (TI [0xfd, 0x50                  ] (LD (Reg8Reg8 D B))))
    , testCase "0xfd LD D,C         " (z80instTest (TI [0xfd, 0x51                  ] (LD (Reg8Reg8 D C))))
    , testCase "0xfd LD D,D         " (z80instTest (TI [0xfd, 0x52                  ] (LD (Reg8Reg8 D D))))
    , testCase "0xfd LD D,E         " (z80instTest (TI [0xfd, 0x53                  ] (LD (Reg8Reg8 D E))))
    , testCase "LD D,IYh            " (z80instTest (TI [0xfd, 0x54                  ] (LD (Reg8Reg8 D IYh))))
    , testCase "LD D,IYl            " (z80instTest (TI [0xfd, 0x55                  ] (LD (Reg8Reg8 D IYl))))
    , testCase "LD D,(IY+N)         " (z80instTest (TI [0xFD, 0x56, 0xde            ] (LD (Reg8Reg8 D (IYindirect (negate 34))))))
    , testCase "0xfd LD D,A         " (z80instTest (TI [0xfd, 0x57                  ] (LD (Reg8Reg8 D A))))
    , testCase "0xfd LD E,B         " (z80instTest (TI [0xfd, 0x58                  ] (LD (Reg8Reg8 E B))))
    , testCase "0xfd LD E,C         " (z80instTest (TI [0xfd, 0x59                  ] (LD (Reg8Reg8 E C))))
    , testCase "0xfd LD E,D         " (z80instTest (TI [0xfd, 0x5A                  ] (LD (Reg8Reg8 E D))))
    , testCase "0xfd LD E,E         " (z80instTest (TI [0xfd, 0x5B                  ] (LD (Reg8Reg8 E E))))
    , testCase "LD E,IYh            " (z80instTest (TI [0xfd, 0x5C                  ] (LD (Reg8Reg8 E IYh))))
    , testCase "LD E,IYl            " (z80instTest (TI [0xfd, 0x5D                  ] (LD (Reg8Reg8 E IYl))))
    , testCase "LD E,(IY+N)         " (z80instTest (TI [0xFD, 0x5E, 0x0f            ] (LD (Reg8Reg8 E (IYindirect 0x0f)))))
    , testCase "0xfd LD E,A         " (z80instTest (TI [0xfd, 0x5F                  ] (LD (Reg8Reg8 E A))))
    , testCase "LD IYh,B            " (z80instTest (TI [0xfd, 0x60                  ] (LD (Reg8Reg8 IYh B))))
    , testCase "LD IYh,C            " (z80instTest (TI [0xfd, 0x61                  ] (LD (Reg8Reg8 IYh C))))
    , testCase "LD IYh,D            " (z80instTest (TI [0xfd, 0x62                  ] (LD (Reg8Reg8 IYh D))))
    , testCase "LD IYh,E            " (z80instTest (TI [0xfd, 0x63                  ] (LD (Reg8Reg8 IYh E))))
    , testCase "LD IYh,IYh          " (z80instTest (TI [0xfd, 0x64                  ] (LD (Reg8Reg8 IYh IYh))))
    , testCase "LD IYh,IYl          " (z80instTest (TI [0xfd, 0x65                  ] (LD (Reg8Reg8 IYh IYl))))
    , testCase "LD IYh,(IY+N)       " (z80instTest (TI [0xFD, 0x66, 0x12            ] (LD (Reg8Reg8 IYh (IYindirect 0x12)))))
    , testCase "LD Ixh,A            " (z80instTest (TI [0xfd, 0x67                  ] (LD (Reg8Reg8 IYh A))))
    , testCase "LD IYl,B            " (z80instTest (TI [0xfd, 0x68                  ] (LD (Reg8Reg8 IYl B))))
    , testCase "LD IYl,C            " (z80instTest (TI [0xfd, 0x69                  ] (LD (Reg8Reg8 IYl C))))
    , testCase "LD IYl,D            " (z80instTest (TI [0xfd, 0x6A                  ] (LD (Reg8Reg8 IYl D))))
    , testCase "LD IYl,E            " (z80instTest (TI [0xfd, 0x6B                  ] (LD (Reg8Reg8 IYl E))))
    , testCase "LD IYl,IYh          " (z80instTest (TI [0xfd, 0x6C                  ] (LD (Reg8Reg8 IYl IYh))))
    , testCase "LD IYl,IYl          " (z80instTest (TI [0xfd, 0x6D                  ] (LD (Reg8Reg8 IYl IYl))))
    , testCase "LD IYl,(IY+N)       " (z80instTest (TI [0xFD, 0x6E, 0x34            ] (LD (Reg8Reg8 IYl (IYindirect 0x34)))))
    , testCase "LD IYl,A            " (z80instTest (TI [0xfd, 0x6F                  ] (LD (Reg8Reg8 IYl A))))
    , testCase "LD (IY+N),B         " (z80instTest (TI [0xFD, 0x70, 0x56            ] (LD (Reg8Reg8 (IYindirect 0x56) B))))
    , testCase "LD (IY+N),C         " (z80instTest (TI [0xFD, 0x71, 0x78            ] (LD (Reg8Reg8 (IYindirect 0x78) C))))
    , testCase "LD (IY+N),D         " (z80instTest (TI [0xFD, 0x72, 0x9a            ] (LD (Reg8Reg8 (IYindirect (negate 102)) D))))
    , testCase "LD (IY+N),E         " (z80instTest (TI [0xFD, 0x73, 0xbc            ] (LD (Reg8Reg8 (IYindirect (negate 68)) E))))
    , testCase "LD (IY+N),H         " (z80instTest (TI [0xFD, 0x74, 0xde            ] (LD (Reg8Reg8 (IYindirect (negate 34)) IYh))))
    , testCase "LD (IY+N),L         " (z80instTest (TI [0xFD, 0x75, 0x0f            ] (LD (Reg8Reg8 (IYindirect 0x0f) IYl))))
    , testCase "0xfd HALT           " (z80instTest (TI [0xfd, 0x76                  ] HALT))
    , testCase "LD (IY+N),A         " (z80instTest (TI [0xFD, 0x77, 0x12            ] (LD (Reg8Reg8 (IYindirect 0x12) A))))
    , testCase "0xfd LD A,B         " (z80instTest (TI [0xfd, 0x78                  ] (LD (Reg8Reg8 A B))))
    , testCase "0xfd LD A,C         " (z80instTest (TI [0xfd, 0x79                  ] (LD (Reg8Reg8 A C))))
    , testCase "0xfd LD A,D         " (z80instTest (TI [0xfd, 0x7A                  ] (LD (Reg8Reg8 A D))))
    , testCase "0xfd LD A,E         " (z80instTest (TI [0xfd, 0x7B                  ] (LD (Reg8Reg8 A E))))
    , testCase "LD A,IYh            " (z80instTest (TI [0xfd, 0x7C                  ] (LD (Reg8Reg8 A IYh))))
    , testCase "LD A,IYl            " (z80instTest (TI [0xfd, 0x7D                  ] (LD (Reg8Reg8 A IYl))))
    , testCase "LD A,(IY+N)         " (z80instTest (TI [0xFD, 0x7E, 0x34            ] (LD (Reg8Reg8 A (IYindirect 0x34)))))
    , testCase "0xfd LD A,A         " (z80instTest (TI [0xfd, 0x7F                  ] (LD (Reg8Reg8 A A))))
    , testCase "0xfd ADD A,B        " (z80instTest (TI [0xfd, 0x80                  ] (ADD8 (ALUAcc (ALUreg8 B)))))
    , testCase "0xfd ADD A,C        " (z80instTest (TI [0xfd, 0x81                  ] (ADD8 (ALUAcc (ALUreg8 C)))))
    , testCase "0xfd ADD A,D        " (z80instTest (TI [0xfd, 0x82                  ] (ADD8 (ALUAcc (ALUreg8 D)))))
    , testCase "0xfd ADD A,E        " (z80instTest (TI [0xfd, 0x83                  ] (ADD8 (ALUAcc (ALUreg8 E)))))
    , testCase "ADD A,IYh           " (z80instTest (TI [0xfd, 0x84                  ] (ADD8 (ALUAcc (ALUreg8 IYh)))))
    , testCase "ADD A,IYl           " (z80instTest (TI [0xfd, 0x85                  ] (ADD8 (ALUAcc (ALUreg8 IYl)))))
    , testCase "ADD A,(IY+N)        " (z80instTest (TI [0xFD, 0x86, 0x56            ] (ADD8 (ALUAcc (ALUreg8 (IYindirect 0x56))))))
    , testCase "0xfd ADD A,A        " (z80instTest (TI [0xfd, 0x87                  ] (ADD8 (ALUAcc (ALUreg8 A)))))
    , testCase "0xfd ADC A,B        " (z80instTest (TI [0xfd, 0x88                  ] (ADC8 (ALUAcc (ALUreg8 B)))))
    , testCase "0xfd ADC A,C        " (z80instTest (TI [0xfd, 0x89                  ] (ADC8 (ALUAcc (ALUreg8 C)))))
    , testCase "0xfd ADC A,D        " (z80instTest (TI [0xfd, 0x8A                  ] (ADC8 (ALUAcc (ALUreg8 D)))))
    , testCase "0xfd ADC A,E        " (z80instTest (TI [0xfd, 0x8B                  ] (ADC8 (ALUAcc (ALUreg8 E)))))
    , testCase "0xfd ADC A,IYh      " (z80instTest (TI [0xfd, 0x8C                  ] (ADC8 (ALUAcc (ALUreg8 IYh)))))
    , testCase "0xfd ADC A,IYl      " (z80instTest (TI [0xfd, 0x8D                  ] (ADC8 (ALUAcc (ALUreg8 IYl)))))
    , testCase "ADC A,(IY+N)        " (z80instTest (TI [0xFD, 0x8E, 0x78            ] (ADC8 (ALUAcc (ALUreg8 (IYindirect 0x78))))))
    , testCase "0xfd ADC A,A        " (z80instTest (TI [0xfd, 0x8F                  ] (ADC8 (ALUAcc (ALUreg8 A)))))
    , testCase "0xfd SUB B          " (z80instTest (TI [0xfd, 0x90                  ] (SUB (ALUreg8 B))))
    , testCase "0xfd SUB C          " (z80instTest (TI [0xfd, 0x91                  ] (SUB (ALUreg8 C))))
    , testCase "0xfd SUB D          " (z80instTest (TI [0xfd, 0x92                  ] (SUB (ALUreg8 D))))
    , testCase "0xfd SUB E          " (z80instTest (TI [0xfd, 0x93                  ] (SUB (ALUreg8 E))))
    , testCase "0xfd SUB IYh        " (z80instTest (TI [0xfd, 0x94                  ] (SUB (ALUreg8 IYh))))
    , testCase "0xfd SUB IYl        " (z80instTest (TI [0xfd, 0x95                  ] (SUB (ALUreg8 IYl))))
    , testCase "SUB (IY+N)          " (z80instTest (TI [0xFD, 0x96, 0x9a            ] (SUB (ALUreg8 (IYindirect (negate 102))))))
    , testCase "0xfd SUB A          " (z80instTest (TI [0xfd, 0x97                  ] (SUB (ALUreg8 A))))
    , testCase "0xfd SBC B          " (z80instTest (TI [0xfd, 0x98                  ] (SBC8 (ALUAcc (ALUreg8 B)))))
    , testCase "0xfd SBC C          " (z80instTest (TI [0xfd, 0x99                  ] (SBC8 (ALUAcc (ALUreg8 C)))))
    , testCase "0xfd SBC D          " (z80instTest (TI [0xfd, 0x9A                  ] (SBC8 (ALUAcc (ALUreg8 D)))))
    , testCase "0xfd SBC E          " (z80instTest (TI [0xfd, 0x9B                  ] (SBC8 (ALUAcc (ALUreg8 E)))))
    , testCase "0xfd SBC IYh        " (z80instTest (TI [0xfd, 0x9C                  ] (SBC8 (ALUAcc (ALUreg8 IYh)))))
    , testCase "0xfd SBC IYl        " (z80instTest (TI [0xfd, 0x9D                  ] (SBC8 (ALUAcc (ALUreg8 IYl)))))
    , testCase "SBC A,(IY+N)        " (z80instTest (TI [0xFD, 0x9E, 0xbc            ] (SBC8 (ALUAcc (ALUreg8 (IYindirect(negate 68)))))))
    , testCase "0xfd SBC A          " (z80instTest (TI [0xfd, 0x9F                  ] (SBC8 (ALUAcc (ALUreg8 A)))))
    , testCase "0xfd AND B          " (z80instTest (TI [0xfd, 0xA0                  ] (AND (ALUreg8 B))))
    , testCase "0xfd AND C          " (z80instTest (TI [0xfd, 0xA1                  ] (AND (ALUreg8 C))))
    , testCase "0xfd AND D          " (z80instTest (TI [0xfd, 0xA2                  ] (AND (ALUreg8 D))))
    , testCase "0xfd AND E          " (z80instTest (TI [0xfd, 0xA3                  ] (AND (ALUreg8 E))))
    , testCase "0xfd AND IYh        " (z80instTest (TI [0xfd, 0xA4                  ] (AND (ALUreg8 IYh))))
    , testCase "0xfd AND IYh        " (z80instTest (TI [0xfd, 0xA5                  ] (AND (ALUreg8 IYl))))
    , testCase "AND (IY+N)          " (z80instTest (TI [0xFD, 0xA6, 0xde            ] (AND (ALUreg8 (IYindirect (negate 34))))))
    , testCase "0xfd AND A          " (z80instTest (TI [0xfd, 0xA7                  ] (AND (ALUreg8 A))))
    , testCase "0xfd XOR B          " (z80instTest (TI [0xfd, 0xA8                  ] (XOR (ALUreg8 B))))
    , testCase "0xfd XOR C          " (z80instTest (TI [0xfd, 0xA9                  ] (XOR (ALUreg8 C))))
    , testCase "0xfd XOR D          " (z80instTest (TI [0xfd, 0xAA                  ] (XOR (ALUreg8 D))))
    , testCase "0xfd XOR E          " (z80instTest (TI [0xfd, 0xAB                  ] (XOR (ALUreg8 E))))
    , testCase "0xfd XOR IYh        " (z80instTest (TI [0xfd, 0xAC                  ] (XOR (ALUreg8 IYh))))
    , testCase "0xfd XOR IYl        " (z80instTest (TI [0xfd, 0xAD                  ] (XOR (ALUreg8 IYl))))
    , testCase "XOR (IY+N)          " (z80instTest (TI [0xFD, 0xAE, 0x0f            ] (XOR (ALUreg8 (IYindirect 0x0f)))))
    , testCase "0xfd XOR A          " (z80instTest (TI [0xfd, 0xAF                  ] (XOR (ALUreg8 A))))
    , testCase "0xfd OR B           " (z80instTest (TI [0xfd, 0xB0                  ] (OR (ALUreg8 B))))
    , testCase "0xfd OR C           " (z80instTest (TI [0xfd, 0xB1                  ] (OR (ALUreg8 C))))
    , testCase "0xfd OR D           " (z80instTest (TI [0xfd, 0xB2                  ] (OR (ALUreg8 D))))
    , testCase "0xfd OR E           " (z80instTest (TI [0xfd, 0xB3                  ] (OR (ALUreg8 E))))
    , testCase "0xfd OR IYh         " (z80instTest (TI [0xfd, 0xB4                  ] (OR (ALUreg8 IYh))))
    , testCase "0xfd OR IYh         " (z80instTest (TI [0xfd, 0xB5                  ] (OR (ALUreg8 IYl))))
    , testCase "OR (IY+N)           " (z80instTest (TI [0xFD, 0xB6, 0x12            ] (OR (ALUreg8 (IYindirect 0x12)))))
    , testCase "0xfd OR A           " (z80instTest (TI [0xfd, 0xB7                  ] (OR (ALUreg8 A))))
    , testCase "0xfd CP B           " (z80instTest (TI [0xfd, 0xB8                  ] (CP (ALUreg8 B))))
    , testCase "0xfd CP C           " (z80instTest (TI [0xfd, 0xB9                  ] (CP (ALUreg8 C))))
    , testCase "0xfd CP D           " (z80instTest (TI [0xfd, 0xBA                  ] (CP (ALUreg8 D))))
    , testCase "0xfd CP E           " (z80instTest (TI [0xfd, 0xBB                  ] (CP (ALUreg8 E))))
    , testCase "0xfd CP IYh         " (z80instTest (TI [0xfd, 0xBC                  ] (CP (ALUreg8 IYh))))
    , testCase "0xfd CP IYl         " (z80instTest (TI [0xfd, 0xBD                  ] (CP (ALUreg8 IYl))))
    , testCase "CP (IY+N)           " (z80instTest (TI [0xFD, 0xBE, 0x34            ] (CP (ALUreg8 (IYindirect 0x34)))))
    , testCase "0xfd CP A           " (z80instTest (TI [0xfd, 0xBF                  ] (CP (ALUreg8 A))))
    , testCase "0xfd RET NZ         " (z80instTest (TI [0xfd, 0xC0                  ] (RETCC NZ)))
    , testCase "0xfd POP BC         " (z80instTest (TI [0xfd, 0xC1                  ] (POP (AFPair16 BC))))
    , testCase "0xfd JP NZ,$+3      " (z80instTest (TI [0xfd, 0xC2, 0x78, 0x56      ] (JPCC NZ (AbsAddr 0x5678))))
    , testCase "0xfd JP $+3         " (z80instTest (TI [0xfd, 0xC3, 0x34, 0x12      ] (JP (AbsAddr 0x1234))))
    , testCase "0xfd CALL NZ,NN     " (z80instTest (TI [0xfd, 0xC4, 0x56, 0x78      ] (CALLCC NZ (AbsAddr 0x7856))))
    , testCase "0xfd PUSH BC        " (z80instTest (TI [0xfd, 0xC5                  ] (PUSH (AFPair16 BC))))
    , testCase "0xfd ADD A,N        " (z80instTest (TI [0xfd, 0xC6, 0x9a            ] (ADD8 (ALUAcc (ALUimm 0x9a)))))
    , testCase "0xfd RST 0          " (z80instTest (TI [0xfd, 0xC7                  ] (RST 0)))
    , testCase "0xfd RET Z          " (z80instTest (TI [0xfd, 0xC8                  ] (RETCC Z)))
    , testCase "0xfd RET            " (z80instTest (TI [0xfd, 0xC9                  ] RET))
    , testCase "0xfd JP Z,$+3       " (z80instTest (TI [0xfd, 0xCA, 0xbb, 0xaa      ] (JPCC Z (AbsAddr 0xaabb))))
    , testCase "RLC (IY+d)->B       " (z80instTest (TI [0xfd, 0xCB, 0x10, 0x00      ] (RLCidx (IYindirect 0x10) B)))
    , testCase "RLC (IY+d)->C       " (z80instTest (TI [0xfd, 0xCB, 0x11, 0x01      ] (RLCidx (IYindirect 0x11) C)))
    , testCase "RLC (IY+d)->D       " (z80instTest (TI [0xfd, 0xCB, 0x12, 0x02      ] (RLCidx (IYindirect 0x12) D)))
    , testCase "RLC (IY+d)->E       " (z80instTest (TI [0xfd, 0xCB, 0x13, 0x03      ] (RLCidx (IYindirect 0x13) E)))
    , testCase "RLC (IY+d)->H       " (z80instTest (TI [0xfd, 0xCB, 0x14, 0x04      ] (RLCidx (IYindirect 0x14) H)))
    , testCase "RLC (IY+d)->L       " (z80instTest (TI [0xfd, 0xCB, 0x15, 0x05      ] (RLCidx (IYindirect 0x15) L)))
    , testCase "RLC (IY+d)          " (z80instTest (TI [0xfd, 0xCB, 0x16, 0x06      ] (RLC (IYindirect 0x16))))
    , testCase "RLC (IY+d)->A       " (z80instTest (TI [0xfd, 0xCB, 0x17, 0x07      ] (RLCidx (IYindirect 0x17) A)))
    , testCase "RRC (IY+d)->B       " (z80instTest (TI [0xfd, 0xCB, 0x10, 0x08      ] (RRCidx (IYindirect 0x10) B)))
    , testCase "RRC (IY+d)->C       " (z80instTest (TI [0xfd, 0xCB, 0x11, 0x09      ] (RRCidx (IYindirect 0x11) C)))
    , testCase "RRC (IY+d)->D       " (z80instTest (TI [0xfd, 0xCB, 0x12, 0x0a      ] (RRCidx (IYindirect 0x12) D)))
    , testCase "RRC (IY+d)->E       " (z80instTest (TI [0xfd, 0xCB, 0x13, 0x0b      ] (RRCidx (IYindirect 0x13) E)))
    , testCase "RRC (IY+d)->H       " (z80instTest (TI [0xfd, 0xCB, 0x14, 0x0c      ] (RRCidx (IYindirect 0x14) H)))
    , testCase "RRC (IY+d)->L       " (z80instTest (TI [0xfd, 0xCB, 0x15, 0x0d      ] (RRCidx (IYindirect 0x15) L)))
    , testCase "RRC (IY+d)          " (z80instTest (TI [0xfd, 0xCB, 0x16, 0x0e      ] (RRC (IYindirect 0x16))))
    , testCase "RRC (IY+d)->A       " (z80instTest (TI [0xfd, 0xCB, 0x17, 0x0f      ] (RRCidx (IYindirect 0x17) A)))
    , testCase "RL (IY+d)->B        " (z80instTest (TI [0xfd, 0xCB, 0x10, 0x10      ] (RLidx (IYindirect 0x10) B)))
    , testCase "RL (IY+d)->C        " (z80instTest (TI [0xfd, 0xCB, 0x11, 0x11      ] (RLidx (IYindirect 0x11) C)))
    , testCase "RL (IY+d)->D        " (z80instTest (TI [0xfd, 0xCB, 0x12, 0x12      ] (RLidx (IYindirect 0x12) D)))
    , testCase "RL (IY+d)->E        " (z80instTest (TI [0xfd, 0xCB, 0x13, 0x13      ] (RLidx (IYindirect 0x13) E)))
    , testCase "RL (IY+d)->H        " (z80instTest (TI [0xfd, 0xCB, 0x14, 0x14      ] (RLidx (IYindirect 0x14) H)))
    , testCase "RL (IY+d)->L        " (z80instTest (TI [0xfd, 0xCB, 0x15, 0x15      ] (RLidx (IYindirect 0x15) L)))
    , testCase "RL (IY+d)           " (z80instTest (TI [0xfd, 0xCB, 0x16, 0x16      ] (RL (IYindirect 0x16))))
    , testCase "RL (IY+d)->A        " (z80instTest (TI [0xfd, 0xCB, 0x17, 0x17      ] (RLidx (IYindirect 0x17) A)))
    , testCase "RR (IY+d)->B        " (z80instTest (TI [0xfd, 0xCB, 0x10, 0x18      ] (RRidx (IYindirect 0x10) B)))
    , testCase "RR (IY+d)->C        " (z80instTest (TI [0xfd, 0xCB, 0x11, 0x19      ] (RRidx (IYindirect 0x11) C)))
    , testCase "RR (IY+d)->D        " (z80instTest (TI [0xfd, 0xCB, 0x12, 0x1a      ] (RRidx (IYindirect 0x12) D)))
    , testCase "RR (IY+d)->E        " (z80instTest (TI [0xfd, 0xCB, 0x13, 0x1b      ] (RRidx (IYindirect 0x13) E)))
    , testCase "RR (IY+d)->H        " (z80instTest (TI [0xfd, 0xCB, 0x14, 0x1c      ] (RRidx (IYindirect 0x14) H)))
    , testCase "RR (IY+d)->L        " (z80instTest (TI [0xfd, 0xCB, 0x15, 0x1d      ] (RRidx (IYindirect 0x15) L)))
    , testCase "RR (IY+d)           " (z80instTest (TI [0xfd, 0xCB, 0x16, 0x1e      ] (RR (IYindirect 0x16))))
    , testCase "RR (IY+d)->A        " (z80instTest (TI [0xfd, 0xCB, 0x17, 0x1f      ] (RRidx (IYindirect 0x17) A)))
    , testCase "SLA (IY+d)->B       " (z80instTest (TI [0xfd, 0xCB, 0x10, 0x20      ] (SLAidx (IYindirect 0x10) B)))
    , testCase "SLA (IY+d)->C       " (z80instTest (TI [0xfd, 0xCB, 0x11, 0x21      ] (SLAidx (IYindirect 0x11) C)))
    , testCase "SLA (IY+d)->D       " (z80instTest (TI [0xfd, 0xCB, 0x12, 0x22      ] (SLAidx (IYindirect 0x12) D)))
    , testCase "SLA (IY+d)->E       " (z80instTest (TI [0xfd, 0xCB, 0x13, 0x23      ] (SLAidx (IYindirect 0x13) E)))
    , testCase "SLA (IY+d)->H       " (z80instTest (TI [0xfd, 0xCB, 0x14, 0x24      ] (SLAidx (IYindirect 0x14) H)))
    , testCase "SLA (IY+d)->L       " (z80instTest (TI [0xfd, 0xCB, 0x15, 0x25      ] (SLAidx (IYindirect 0x15) L)))
    , testCase "SLA (IY+d)          " (z80instTest (TI [0xfd, 0xCB, 0x16, 0x26      ] (SLA (IYindirect 0x16))))
    , testCase "SLA (IY+d)->A       " (z80instTest (TI [0xfd, 0xCB, 0x17, 0x27      ] (SLAidx (IYindirect 0x17) A)))
    , testCase "SRA (IY+d)->B       " (z80instTest (TI [0xfd, 0xCB, 0x10, 0x28      ] (SRAidx (IYindirect 0x10) B)))
    , testCase "SRA (IY+d)->C       " (z80instTest (TI [0xfd, 0xCB, 0x11, 0x29      ] (SRAidx (IYindirect 0x11) C)))
    , testCase "SRA (IY+d)->D       " (z80instTest (TI [0xfd, 0xCB, 0x12, 0x2a      ] (SRAidx (IYindirect 0x12) D)))
    , testCase "SRA (IY+d)->E       " (z80instTest (TI [0xfd, 0xCB, 0x13, 0x2b      ] (SRAidx (IYindirect 0x13) E)))
    , testCase "SRA (IY+d)->H       " (z80instTest (TI [0xfd, 0xCB, 0x14, 0x2c      ] (SRAidx (IYindirect 0x14) H)))
    , testCase "SRA (IY+d)->L       " (z80instTest (TI [0xfd, 0xCB, 0x15, 0x2d      ] (SRAidx (IYindirect 0x15) L)))
    , testCase "SRA (IY+d)          " (z80instTest (TI [0xfd, 0xCB, 0x16, 0x2e      ] (SRA (IYindirect 0x16))))
    , testCase "SRA (IY+d)->A       " (z80instTest (TI [0xfd, 0xCB, 0x17, 0x2f      ] (SRAidx (IYindirect 0x17) A)))
    , testCase "SLL (IY+d)->B       " (z80instTest (TI [0xfd, 0xCB, 0x10, 0x30      ] (SLLidx (IYindirect 0x10) B)))
    , testCase "SLL (IY+d)->C       " (z80instTest (TI [0xfd, 0xCB, 0x11, 0x31      ] (SLLidx (IYindirect 0x11) C)))
    , testCase "SLL (IY+d)->D       " (z80instTest (TI [0xfd, 0xCB, 0x12, 0x32      ] (SLLidx (IYindirect 0x12) D)))
    , testCase "SLL (IY+d)->E       " (z80instTest (TI [0xfd, 0xCB, 0x13, 0x33      ] (SLLidx (IYindirect 0x13) E)))
    , testCase "SLL (IY+d)->H       " (z80instTest (TI [0xfd, 0xCB, 0x14, 0x34      ] (SLLidx (IYindirect 0x14) H)))
    , testCase "SLL (IY+d)->L       " (z80instTest (TI [0xfd, 0xCB, 0x15, 0x35      ] (SLLidx (IYindirect 0x15) L)))
    , testCase "SLL (IY+d)          " (z80instTest (TI [0xfd, 0xCB, 0x16, 0x36      ] (SLL (IYindirect 0x16))))
    , testCase "SLL (IY+d)->A       " (z80instTest (TI [0xfd, 0xCB, 0x17, 0x37      ] (SLLidx (IYindirect 0x17) A)))
    , testCase "SRL (IY+d)->B       " (z80instTest (TI [0xfd, 0xCB, 0x10, 0x38      ] (SRLidx (IYindirect 0x10) B)))
    , testCase "SRL (IY+d)->C       " (z80instTest (TI [0xfd, 0xCB, 0x11, 0x39      ] (SRLidx (IYindirect 0x11) C)))
    , testCase "SRL (IY+d)->D       " (z80instTest (TI [0xfd, 0xCB, 0x12, 0x3a      ] (SRLidx (IYindirect 0x12) D)))
    , testCase "SRL (IY+d)->E       " (z80instTest (TI [0xfd, 0xCB, 0x13, 0x3b      ] (SRLidx (IYindirect 0x13) E)))
    , testCase "SRL (IY+d)->H       " (z80instTest (TI [0xfd, 0xCB, 0x14, 0x3c      ] (SRLidx (IYindirect 0x14) H)))
    , testCase "SRL (IY+d)->L       " (z80instTest (TI [0xfd, 0xCB, 0x15, 0x3d      ] (SRLidx (IYindirect 0x15) L)))
    , testCase "SRL (IY+d)          " (z80instTest (TI [0xfd, 0xCB, 0x16, 0x3e      ] (SRL (IYindirect 0x16))))
    , testCase "SRL (IY+d)->A       " (z80instTest (TI [0xfd, 0xCB, 0x17, 0x3f      ] (SRLidx (IYindirect 0x17) A)))
    , testCase "BIT 0,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x20, 0x40      ] (BIT 0 (IYindirect 0x20))))
    , testCase "BIT 0,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x21, 0x41      ] (BIT 0 (IYindirect 0x21))))
    , testCase "BIT 0,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x22, 0x42      ] (BIT 0 (IYindirect 0x22))))
    , testCase "BIT 0,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x23, 0x43      ] (BIT 0 (IYindirect 0x23))))
    , testCase "BIT 0,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x24, 0x44      ] (BIT 0 (IYindirect 0x24))))
    , testCase "BIT 0,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x25, 0x45      ] (BIT 0 (IYindirect 0x25))))
    , testCase "BIT 0,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x26, 0x46      ] (BIT 0 (IYindirect 0x26))))
    , testCase "BIT 0,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x27, 0x47      ] (BIT 0 (IYindirect 0x27))))
    , testCase "BIT 1,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x28, 0x48      ] (BIT 1 (IYindirect 0x28))))
    , testCase "BIT 1,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x29, 0x49      ] (BIT 1 (IYindirect 0x29))))
    , testCase "BIT 1,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2a, 0x4a      ] (BIT 1 (IYindirect 0x2a))))
    , testCase "BIT 1,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2b, 0x4b      ] (BIT 1 (IYindirect 0x2b))))
    , testCase "BIT 1,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2c, 0x4c      ] (BIT 1 (IYindirect 0x2c))))
    , testCase "BIT 1,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2d, 0x4d      ] (BIT 1 (IYindirect 0x2d))))
    , testCase "BIT 1,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2e, 0x4e      ] (BIT 1 (IYindirect 0x2e))))
    , testCase "BIT 1,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2f, 0x4f      ] (BIT 1 (IYindirect 0x2f))))
    , testCase "BIT 2,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x20, 0x50      ] (BIT 2 (IYindirect 0x20))))
    , testCase "BIT 2,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x21, 0x51      ] (BIT 2 (IYindirect 0x21))))
    , testCase "BIT 2,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x22, 0x52      ] (BIT 2 (IYindirect 0x22))))
    , testCase "BIT 2,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x23, 0x53      ] (BIT 2 (IYindirect 0x23))))
    , testCase "BIT 2,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x24, 0x54      ] (BIT 2 (IYindirect 0x24))))
    , testCase "BIT 2,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x25, 0x55      ] (BIT 2 (IYindirect 0x25))))
    , testCase "BIT 2,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x26, 0x56      ] (BIT 2 (IYindirect 0x26))))
    , testCase "BIT 2,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x27, 0x57      ] (BIT 2 (IYindirect 0x27))))
    , testCase "BIT 3,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x28, 0x58      ] (BIT 3 (IYindirect 0x28))))
    , testCase "BIT 3,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x29, 0x59      ] (BIT 3 (IYindirect 0x29))))
    , testCase "BIT 3,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2a, 0x5a      ] (BIT 3 (IYindirect 0x2a))))
    , testCase "BIT 3,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2b, 0x5b      ] (BIT 3 (IYindirect 0x2b))))
    , testCase "BIT 3,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2c, 0x5c      ] (BIT 3 (IYindirect 0x2c))))
    , testCase "BIT 3,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2d, 0x5d      ] (BIT 3 (IYindirect 0x2d))))
    , testCase "BIT 3,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2e, 0x5e      ] (BIT 3 (IYindirect 0x2e))))
    , testCase "BIT 3,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2f, 0x5f      ] (BIT 3 (IYindirect 0x2f))))
    , testCase "BIT 4,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x20, 0x60      ] (BIT 4 (IYindirect 0x20))))
    , testCase "BIT 4,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x21, 0x61      ] (BIT 4 (IYindirect 0x21))))
    , testCase "BIT 4,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x22, 0x62      ] (BIT 4 (IYindirect 0x22))))
    , testCase "BIT 4,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x23, 0x63      ] (BIT 4 (IYindirect 0x23))))
    , testCase "BIT 4,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x24, 0x64      ] (BIT 4 (IYindirect 0x24))))
    , testCase "BIT 4,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x25, 0x65      ] (BIT 4 (IYindirect 0x25))))
    , testCase "BIT 4,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x26, 0x66      ] (BIT 4 (IYindirect 0x26))))
    , testCase "BIT 4,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x27, 0x67      ] (BIT 4 (IYindirect 0x27))))
    , testCase "BIT 5,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x28, 0x68      ] (BIT 5 (IYindirect 0x28))))
    , testCase "BIT 5,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x29, 0x69      ] (BIT 5 (IYindirect 0x29))))
    , testCase "BIT 5,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2a, 0x6a      ] (BIT 5 (IYindirect 0x2a))))
    , testCase "BIT 5,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2b, 0x6b      ] (BIT 5 (IYindirect 0x2b))))
    , testCase "BIT 5,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2c, 0x6c      ] (BIT 5 (IYindirect 0x2c))))
    , testCase "BIT 5,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2d, 0x6d      ] (BIT 5 (IYindirect 0x2d))))
    , testCase "BIT 5,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2e, 0x6e      ] (BIT 5 (IYindirect 0x2e))))
    , testCase "BIT 5,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2f, 0x6f      ] (BIT 5 (IYindirect 0x2f))))
    , testCase "BIT 6,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x20, 0x70      ] (BIT 6 (IYindirect 0x20))))
    , testCase "BIT 6,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x21, 0x71      ] (BIT 6 (IYindirect 0x21))))
    , testCase "BIT 6,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x22, 0x72      ] (BIT 6 (IYindirect 0x22))))
    , testCase "BIT 6,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x23, 0x73      ] (BIT 6 (IYindirect 0x23))))
    , testCase "BIT 6,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x24, 0x74      ] (BIT 6 (IYindirect 0x24))))
    , testCase "BIT 6,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x25, 0x75      ] (BIT 6 (IYindirect 0x25))))
    , testCase "BIT 6,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x26, 0x76      ] (BIT 6 (IYindirect 0x26))))
    , testCase "BIT 6,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x27, 0x77      ] (BIT 6 (IYindirect 0x27))))
    , testCase "BIT 7,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x28, 0x78      ] (BIT 7 (IYindirect 0x28))))
    , testCase "BIT 7,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x29, 0x79      ] (BIT 7 (IYindirect 0x29))))
    , testCase "BIT 7,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2a, 0x7a      ] (BIT 7 (IYindirect 0x2a))))
    , testCase "BIT 7,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2b, 0x7b      ] (BIT 7 (IYindirect 0x2b))))
    , testCase "BIT 7,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2c, 0x7c      ] (BIT 7 (IYindirect 0x2c))))
    , testCase "BIT 7,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2d, 0x7d      ] (BIT 7 (IYindirect 0x2d))))
    , testCase "BIT 7,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2e, 0x7e      ] (BIT 7 (IYindirect 0x2e))))
    , testCase "BIT 7,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x2f, 0x7f      ] (BIT 7 (IYindirect 0x2f))))
    , testCase "RES 0,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0x80      ] (RESidx 0 (IYindirect 0x10) B)))
    , testCase "RES 0,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0x81      ] (RESidx 0 (IYindirect 0x11) C)))
    , testCase "RES 0,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0x82      ] (RESidx 0 (IYindirect 0x12) D)))
    , testCase "RES 0,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0x83      ] (RESidx 0 (IYindirect 0x13) E)))
    , testCase "RES 0,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0x84      ] (RESidx 0 (IYindirect 0x14) H)))
    , testCase "RES 0,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0x85      ] (RESidx 0 (IYindirect 0x15) L)))
    , testCase "RES 0,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0x86      ] (RES 0 (IYindirect 0x16))))
    , testCase "RES 0,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0x87      ] (RESidx 0 (IYindirect 0x17) A)))
    , testCase "RES 1,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0x88      ] (RESidx 1 (IYindirect 0x10) B)))
    , testCase "RES 1,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0x89      ] (RESidx 1 (IYindirect 0x11) C)))
    , testCase "RES 1,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0x8a      ] (RESidx 1 (IYindirect 0x12) D)))
    , testCase "RES 1,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0x8b      ] (RESidx 1 (IYindirect 0x13) E)))
    , testCase "RES 1,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0x8c      ] (RESidx 1 (IYindirect 0x14) H)))
    , testCase "RES 1,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0x8d      ] (RESidx 1 (IYindirect 0x15) L)))
    , testCase "RES 1,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0x8e      ] (RES 1 (IYindirect 0x16))))
    , testCase "RES 1,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0x8f      ] (RESidx 1 (IYindirect 0x17) A)))
    , testCase "RES 2,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0x90      ] (RESidx 2 (IYindirect 0x10) B)))
    , testCase "RES 2,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0x91      ] (RESidx 2 (IYindirect 0x11) C)))
    , testCase "RES 2,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0x92      ] (RESidx 2 (IYindirect 0x12) D)))
    , testCase "RES 2,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0x93      ] (RESidx 2 (IYindirect 0x13) E)))
    , testCase "RES 2,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0x94      ] (RESidx 2 (IYindirect 0x14) H)))
    , testCase "RES 2,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0x95      ] (RESidx 2 (IYindirect 0x15) L)))
    , testCase "RES 2,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0x96      ] (RES 2 (IYindirect 0x16))))
    , testCase "RES 2,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0x97      ] (RESidx 2 (IYindirect 0x17) A)))
    , testCase "RES 3,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0x98      ] (RESidx 3 (IYindirect 0x10) B)))
    , testCase "RES 3,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0x99      ] (RESidx 3 (IYindirect 0x11) C)))
    , testCase "RES 3,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0x9a      ] (RESidx 3 (IYindirect 0x12) D)))
    , testCase "RES 3,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0x9b      ] (RESidx 3 (IYindirect 0x13) E)))
    , testCase "RES 3,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0x9c      ] (RESidx 3 (IYindirect 0x14) H)))
    , testCase "RES 3,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0x9d      ] (RESidx 3 (IYindirect 0x15) L)))
    , testCase "RES 3,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0x9e      ] (RES 3 (IYindirect 0x16))))
    , testCase "RES 3,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0x9f      ] (RESidx 3 (IYindirect 0x17) A)))
    , testCase "RES 4,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0xa0      ] (RESidx 4 (IYindirect 0x10) B)))
    , testCase "RES 4,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0xa1      ] (RESidx 4 (IYindirect 0x11) C)))
    , testCase "RES 4,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0xa2      ] (RESidx 4 (IYindirect 0x12) D)))
    , testCase "RES 4,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0xa3      ] (RESidx 4 (IYindirect 0x13) E)))
    , testCase "RES 4,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0xa4      ] (RESidx 4 (IYindirect 0x14) H)))
    , testCase "RES 4,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0xa5      ] (RESidx 4 (IYindirect 0x15) L)))
    , testCase "RES 4,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0xa6      ] (RES 4 (IYindirect 0x16))))
    , testCase "RES 4,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0xa7      ] (RESidx 4 (IYindirect 0x17) A)))
    , testCase "RES 5,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0xa8      ] (RESidx 5 (IYindirect 0x10) B)))
    , testCase "RES 5,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0xa9      ] (RESidx 5 (IYindirect 0x11) C)))
    , testCase "RES 5,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0xaa      ] (RESidx 5 (IYindirect 0x12) D)))
    , testCase "RES 5,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0xab      ] (RESidx 5 (IYindirect 0x13) E)))
    , testCase "RES 5,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0xac      ] (RESidx 5 (IYindirect 0x14) H)))
    , testCase "RES 5,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0xad      ] (RESidx 5 (IYindirect 0x15) L)))
    , testCase "RES 5,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0xae      ] (RES 5 (IYindirect 0x16))))
    , testCase "RES 5,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0xaf      ] (RESidx 5 (IYindirect 0x17) A)))
    , testCase "RES 6,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0xb0      ] (RESidx 6 (IYindirect 0x10) B)))
    , testCase "RES 6,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0xb1      ] (RESidx 6 (IYindirect 0x11) C)))
    , testCase "RES 6,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0xb2      ] (RESidx 6 (IYindirect 0x12) D)))
    , testCase "RES 6,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0xb3      ] (RESidx 6 (IYindirect 0x13) E)))
    , testCase "RES 6,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0xb4      ] (RESidx 6 (IYindirect 0x14) H)))
    , testCase "RES 6,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0xb5      ] (RESidx 6 (IYindirect 0x15) L)))
    , testCase "RES 6,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0xb6      ] (RES 6 (IYindirect 0x16))))
    , testCase "RES 6,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0xb7      ] (RESidx 6 (IYindirect 0x17) A)))
    , testCase "RES 7,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0xb8      ] (RESidx 7 (IYindirect 0x10) B)))
    , testCase "RES 7,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0xb9      ] (RESidx 7 (IYindirect 0x11) C)))
    , testCase "RES 7,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0xba      ] (RESidx 7 (IYindirect 0x12) D)))
    , testCase "RES 7,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0xbb      ] (RESidx 7 (IYindirect 0x13) E)))
    , testCase "RES 7,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0xbc      ] (RESidx 7 (IYindirect 0x14) H)))
    , testCase "RES 7,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0xbd      ] (RESidx 7 (IYindirect 0x15) L)))
    , testCase "RES 7,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0xbe      ] (RES 7 (IYindirect 0x16))))
    , testCase "RES 7,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0xbf      ] (RESidx 7 (IYindirect 0x17) A)))
    , testCase "SET 0,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0xc0      ] (SETidx 0 (IYindirect 0x10) B)))
    , testCase "SET 0,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0xc1      ] (SETidx 0 (IYindirect 0x11) C)))
    , testCase "SET 0,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0xc2      ] (SETidx 0 (IYindirect 0x12) D)))
    , testCase "SET 0,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0xc3      ] (SETidx 0 (IYindirect 0x13) E)))
    , testCase "SET 0,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0xc4      ] (SETidx 0 (IYindirect 0x14) H)))
    , testCase "SET 0,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0xc5      ] (SETidx 0 (IYindirect 0x15) L)))
    , testCase "SET 0,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0xc6      ] (SET 0 (IYindirect 0x16))))
    , testCase "SET 0,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0xc7      ] (SETidx 0 (IYindirect 0x17) A)))
    , testCase "SET 1,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0xc8      ] (SETidx 1 (IYindirect 0x10) B)))
    , testCase "SET 1,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0xc9      ] (SETidx 1 (IYindirect 0x11) C)))
    , testCase "SET 1,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0xca      ] (SETidx 1 (IYindirect 0x12) D)))
    , testCase "SET 1,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0xcb      ] (SETidx 1 (IYindirect 0x13) E)))
    , testCase "SET 1,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0xcc      ] (SETidx 1 (IYindirect 0x14) H)))
    , testCase "SET 1,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0xcd      ] (SETidx 1 (IYindirect 0x15) L)))
    , testCase "SET 1,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0xce      ] (SET 1 (IYindirect 0x16))))
    , testCase "SET 1,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0xcf      ] (SETidx 1 (IYindirect 0x17) A)))
    , testCase "SET 2,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0xd0      ] (SETidx 2 (IYindirect 0x10) B)))
    , testCase "SET 2,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0xd1      ] (SETidx 2 (IYindirect 0x11) C)))
    , testCase "SET 2,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0xd2      ] (SETidx 2 (IYindirect 0x12) D)))
    , testCase "SET 2,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0xd3      ] (SETidx 2 (IYindirect 0x13) E)))
    , testCase "SET 2,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0xd4      ] (SETidx 2 (IYindirect 0x14) H)))
    , testCase "SET 2,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0xd5      ] (SETidx 2 (IYindirect 0x15) L)))
    , testCase "SET 2,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0xd6      ] (SET 2 (IYindirect 0x16))))
    , testCase "SET 2,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0xd7      ] (SETidx 2 (IYindirect 0x17) A)))
    , testCase "SET 3,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0xd8      ] (SETidx 3 (IYindirect 0x10) B)))
    , testCase "SET 3,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0xd9      ] (SETidx 3 (IYindirect 0x11) C)))
    , testCase "SET 3,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0xda      ] (SETidx 3 (IYindirect 0x12) D)))
    , testCase "SET 3,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0xdb      ] (SETidx 3 (IYindirect 0x13) E)))
    , testCase "SET 3,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0xdc      ] (SETidx 3 (IYindirect 0x14) H)))
    , testCase "SET 3,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0xdd      ] (SETidx 3 (IYindirect 0x15) L)))
    , testCase "SET 3,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0xde      ] (SET 3 (IYindirect 0x16))))
    , testCase "SET 3,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0xdf      ] (SETidx 3 (IYindirect 0x17) A)))
    , testCase "SET 4,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0xe0      ] (SETidx 4 (IYindirect 0x10) B)))
    , testCase "SET 4,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0xe1      ] (SETidx 4 (IYindirect 0x11) C)))
    , testCase "SET 4,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0xe2      ] (SETidx 4 (IYindirect 0x12) D)))
    , testCase "SET 4,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0xe3      ] (SETidx 4 (IYindirect 0x13) E)))
    , testCase "SET 4,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0xe4      ] (SETidx 4 (IYindirect 0x14) H)))
    , testCase "SET 4,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0xe5      ] (SETidx 4 (IYindirect 0x15) L)))
    , testCase "SET 4,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0xe6      ] (SET 4 (IYindirect 0x16))))
    , testCase "SET 4,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0xe7      ] (SETidx 4 (IYindirect 0x17) A)))
    , testCase "SET 5,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0xe8      ] (SETidx 5 (IYindirect 0x10) B)))
    , testCase "SET 5,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0xe9      ] (SETidx 5 (IYindirect 0x11) C)))
    , testCase "SET 5,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0xea      ] (SETidx 5 (IYindirect 0x12) D)))
    , testCase "SET 5,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0xeb      ] (SETidx 5 (IYindirect 0x13) E)))
    , testCase "SET 5,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0xec      ] (SETidx 5 (IYindirect 0x14) H)))
    , testCase "SET 5,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0xed      ] (SETidx 5 (IYindirect 0x15) L)))
    , testCase "SET 5,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0xee      ] (SET 5 (IYindirect 0x16))))
    , testCase "SET 5,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0xef      ] (SETidx 5 (IYindirect 0x17) A)))
    , testCase "SET 6,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0xf0      ] (SETidx 6 (IYindirect 0x10) B)))
    , testCase "SET 6,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0xf1      ] (SETidx 6 (IYindirect 0x11) C)))
    , testCase "SET 6,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0xf2      ] (SETidx 6 (IYindirect 0x12) D)))
    , testCase "SET 6,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0xf3      ] (SETidx 6 (IYindirect 0x13) E)))
    , testCase "SET 6,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0xf4      ] (SETidx 6 (IYindirect 0x14) H)))
    , testCase "SET 6,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0xf5      ] (SETidx 6 (IYindirect 0x15) L)))
    , testCase "SET 6,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0xf6      ] (SET 6 (IYindirect 0x16))))
    , testCase "SET 6,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0xf7      ] (SETidx 6 (IYindirect 0x17) A)))
    , testCase "SET 7,(IY+d)->B     " (z80instTest (TI [0xfd, 0xCB, 0x10, 0xf8      ] (SETidx 7 (IYindirect 0x10) B)))
    , testCase "SET 7,(IY+d)->C     " (z80instTest (TI [0xfd, 0xCB, 0x11, 0xf9      ] (SETidx 7 (IYindirect 0x11) C)))
    , testCase "SET 7,(IY+d)->D     " (z80instTest (TI [0xfd, 0xCB, 0x12, 0xfa      ] (SETidx 7 (IYindirect 0x12) D)))
    , testCase "SET 7,(IY+d)->E     " (z80instTest (TI [0xfd, 0xCB, 0x13, 0xfb      ] (SETidx 7 (IYindirect 0x13) E)))
    , testCase "SET 7,(IY+d)->H     " (z80instTest (TI [0xfd, 0xCB, 0x14, 0xfc      ] (SETidx 7 (IYindirect 0x14) H)))
    , testCase "SET 7,(IY+d)->L     " (z80instTest (TI [0xfd, 0xCB, 0x15, 0xfd      ] (SETidx 7 (IYindirect 0x15) L)))
    , testCase "SET 7,(IY+d)        " (z80instTest (TI [0xfd, 0xCB, 0x16, 0xfe      ] (SET 7 (IYindirect 0x16))))
    , testCase "SET 7,(IY+d)->A     " (z80instTest (TI [0xfd, 0xCB, 0x17, 0xff      ] (SETidx 7 (IYindirect 0x17) A)))
    , testCase "0xfd CALL Z,NN      " (z80instTest (TI [0xfd, 0xCC, 0x56, 0x78      ] (CALLCC Z (AbsAddr 0x7856))))
    , testCase "0xfd CALL NN        " (z80instTest (TI [0xfd, 0xCD, 0x9a, 0xbc      ] (CALL (AbsAddr 0xbc9a))))
    , testCase "0xfd ADC A,N        " (z80instTest (TI [0xfd, 0xCE, 0xde            ] (ADC8 (ALUAcc (ALUimm 0xde)))))
    , testCase "0xfd RST 8H         " (z80instTest (TI [0xfd, 0xCF                  ] (RST 8)))
    , testCase "0xfd RET NC         " (z80instTest (TI [0xfd, 0xD0                  ] (RETCC NC)))
    , testCase "0xfd POP DE         " (z80instTest (TI [0xfd, 0xD1                  ] (POP (AFPair16 DE))))
    , testCase "0xfd JP NC,$+3      " (z80instTest (TI [0xfd, 0xD2, 0xfd, 0xcc      ] (JPCC NC  (AbsAddr 0xccfd))))
    , testCase "0xfd OUT (N),A      " (z80instTest (TI [0xfd, 0xD3, 0x0f            ] (OUT (PortImm 0x0f))))
    , testCase "0xfd CALL NC,NN     " (z80instTest (TI [0xfd, 0xD4, 0x12, 0x34      ] (CALLCC NC (AbsAddr 0x3412))))
    , testCase "0xfd PUSH DE        " (z80instTest (TI [0xfd, 0xD5                  ] (PUSH (AFPair16 DE))))
    , testCase "0xfd SUB N          " (z80instTest (TI [0xfd, 0xD6, 0x9a            ] (SUB (ALUimm 0x9a))))
    , testCase "0xfd RST 10H        " (z80instTest (TI [0xfd, 0xD7                  ] (RST 0x10)))
    , testCase "0xfd RET C          " (z80instTest (TI [0xfd, 0xD8                  ] (RETCC CY)))
    , testCase "0xfd EXX            " (z80instTest (TI [0xfd, 0xD9                  ] (EXC Primes)))
    , testCase "0xfd JP C,$+3       " (z80instTest (TI [0xfd, 0xDA, 0x54, 0xa4      ] (JPCC CY (AbsAddr 0xa454))))
    , testCase "0xfd IN A,(N)       " (z80instTest (TI [0xfd, 0xDB, 0xbc            ] (IN (PortImm 0xbc))))
    , testCase "0xfd CALL C,NN      " (z80instTest (TI [0xfd, 0xDC, 0xde, 0x0f      ] (CALLCC CY (AbsAddr 0x0fde))))
    , testCase "0xfd SBC A,N        " (z80instTest (TI [0xfd, 0xDE, 0x56            ] (SBC8 (ALUAcc (ALUimm 0x56)))))
    , testCase "0xfd RST 18H        " (z80instTest (TI [0xfd, 0xDF                  ] (RST 0x18)))
    , testCase "0xfd RET PO         " (z80instTest (TI [0xfd, 0xE0                  ] (RETCC PO)))
    , testCase "POP IY              " (z80instTest (TI [0xFD, 0xE1                  ] (POP (AFPair16 IY))))
    , testCase "0xfd JP PO,$+3      " (z80instTest (TI [0xfd, 0xE2, 0x03, 0x61      ] (JPCC PO (AbsAddr 0x6103))))
    , testCase "EX (SP),IY          " (z80instTest (TI [0xFD, 0xE3                  ] (EXC SPIY)))
    , testCase "0xfd CALL PO,NN     " (z80instTest (TI [0xfd, 0xE4, 0x78, 0x9a      ] (CALLCC PO (AbsAddr 0x9a78))))
    , testCase "PUSH IY             " (z80instTest (TI [0xFD, 0xE5                  ] (PUSH (AFPair16 IY))))
    , testCase "0xfd AND N          " (z80instTest (TI [0xfd, 0xE6, 0xbc            ] (AND (ALUimm 0xbc))))
    , testCase "0xfd RST 20H        " (z80instTest (TI [0xfd, 0xE7                  ] (RST 0x20)))
    , testCase "0xfd RET PE         " (z80instTest (TI [0xfd, 0xE8                  ] (RETCC PE)))
    , testCase "JP (IY)             " (z80instTest (TI [0xFD, 0xE9                  ] (JPIY)))
    , testCase "0xfd JP PE,$+3      " (z80instTest (TI [0xfd, 0xEA, 0x35, 0x9f      ] (JPCC PE (AbsAddr 0x9f35))))
    , testCase "0xfd EX DE,HL       " (z80instTest (TI [0xfd, 0xEB                  ] (EXC DEHL)))
    , testCase "0xfd CALL PE,NN     " (z80instTest (TI [0xfd, 0xEC, 0xde, 0x0f      ] (CALLCC PE (AbsAddr 0x0fde))))
    , testCase "0xfd XOR N          " (z80instTest (TI [0xfd, 0xEE, 0x12            ] (XOR (ALUimm 0x12))))
    , testCase "0xfd RST 28H        " (z80instTest (TI [0xfd, 0xEF                  ] (RST 0x28)))
    , testCase "0xfd RET P          " (z80instTest (TI [0xfd, 0xF0                  ] (RETCC POS)))
    , testCase "0xfd POP AF         " (z80instTest (TI [0xfd, 0xF1                  ] (POP AF)))
    , testCase "0xfd JP P,$+3       " (z80instTest (TI [0xfd, 0xF2, 0xcd, 0xab      ] (JPCC POS (AbsAddr 0xabcd))))
    , testCase "0xfd DI             " (z80instTest (TI [0xfd, 0xF3                  ] DI))
    , testCase "0xfd CALL P,NN      " (z80instTest (TI [0xfd, 0xF4, 0x34, 0x56      ] (CALLCC POS (AbsAddr 0x5634))))
    , testCase "0xfd PUSH AF        " (z80instTest (TI [0xfd, 0xF5                  ] (PUSH AF)))
    , testCase "0xfd OR N           " (z80instTest (TI [0xfd, 0xF6, 0x78            ] (OR (ALUimm 0x78))))
    , testCase "0xfd RST 30H        " (z80instTest (TI [0xfd, 0xF7                  ] (RST 0x30)))
    , testCase "0xfd RET M          " (z80instTest (TI [0xfd, 0xF8                  ] (RETCC MI)))
    , testCase "LD SP,IY            " (z80instTest (TI [0xFD, 0xF9                  ] (LDSPIY)))
    , testCase "0xfd JP M,$+3       " (z80instTest (TI [0xfd, 0xFA, 0x44, 0x99      ] (JPCC MI (AbsAddr 0x9944))))
    , testCase "0xfd EI             " (z80instTest (TI [0xfd, 0xFB                  ] EI))
    , testCase "0xfd CALL M,NN      " (z80instTest (TI [0xfd, 0xFC, 0x9a, 0xbc      ] (CALLCC MI (AbsAddr 0xbc9a))))
    , testCase "0xfd CP N           " (z80instTest (TI [0xfd, 0xFE, 0xde            ] (CP (ALUimm 0xde))))
    , testCase "0xfd RST 38H        " (z80instTest (TI [0xfd, 0xFF                  ] (RST 0x38)))
    ]
  ]
